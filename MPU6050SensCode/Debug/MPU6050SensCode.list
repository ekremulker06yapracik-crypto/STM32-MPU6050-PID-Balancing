
MPU6050SensCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080068f4  080068f4  00008084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080068f4  080068f4  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080068fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000084  08006980  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08006980  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff95  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265c  00000000  00000000  00018049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c99  00000000  00000000  0001b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026366  00000000  00000000  0001c391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f78  00000000  00000000  000426f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f901f  00000000  00000000  0005666f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f68e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a08  00000000  00000000  0014f6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001540dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064e0 	.word	0x080064e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	080064e0 	.word	0x080064e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a24      	ldr	r2, [pc, #144]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLed_GPIO_Port, UserLed_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f001 fb97 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 80006b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0xc8>)
 80006c8:	f001 fa08 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : UserLed_Pin */
  GPIO_InitStruct.Pin = UserLed_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UserLed_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 f9f9 	bl	8001adc <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	@ 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <MX_I2C1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <MX_I2C1_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x74>)
 8000738:	f001 fb84 	bl	8001e44 <HAL_I2C_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000742:	f000 fa22 	bl	8000b8a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4809      	ldr	r0, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x74>)
 800074a:	f002 fb1f 	bl	8002d8c <HAL_I2CEx_ConfigAnalogFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 fa19 	bl	8000b8a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_I2C1_Init+0x74>)
 800075c:	f002 fb61 	bl	8002e22 <HAL_I2CEx_ConfigDigitalFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fa10 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000a0 	.word	0x200000a0
 8000774:	40005400 	.word	0x40005400
 8000778:	40b285c2 	.word	0x40b285c2

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a0      	sub	sp, #128	@ 0x80
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	2254      	movs	r2, #84	@ 0x54
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fcaf 	bl	8005100 <memset>
  if(i2cHandle->Instance==I2C1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	@ (800085c <HAL_I2C_MspInit+0xe0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d153      	bne.n	8000854 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f929 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007c4:	f000 f9e1 	bl	8000b8a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fe:	2312      	movs	r3, #18
 8000800:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080a:	2304      	movs	r3, #4
 800080c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000818:	f001 f960 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <HAL_I2C_MspInit+0xe8>)
 8000838:	f001 f950 	bl	8001adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000846:	6593      	str	r3, [r2, #88]	@ 0x58
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_I2C_MspInit+0xe4>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3780      	adds	r7, #128	@ 0x80
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005400 	.word	0x40005400
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 ffc0 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f940 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff fedc 	bl	8000630 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000878:	f7ff ff40 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 800087c:	f000 f9f2 	bl	8000c64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&MPU6050, FS_500, AFS_4G);
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	4882      	ldr	r0, [pc, #520]	@ (8000a90 <main+0x228>)
 8000886:	f000 fb33 	bl	8000ef0 <MPU6050_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800088a:	2100      	movs	r1, #0
 800088c:	4881      	ldr	r0, [pc, #516]	@ (8000a94 <main+0x22c>)
 800088e:	f003 fbc5 	bl	800401c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000892:	2104      	movs	r1, #4
 8000894:	487f      	ldr	r0, [pc, #508]	@ (8000a94 <main+0x22c>)
 8000896:	f003 fbc1 	bl	800401c <HAL_TIM_PWM_Start>

  /*
   * Motor Calib Ayarları Engin!
   */

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 200);
 800089a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a94 <main+0x22c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	22c8      	movs	r2, #200	@ 0xc8
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 200);
 80008a2:	4b7c      	ldr	r3, [pc, #496]	@ (8000a94 <main+0x22c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	22c8      	movs	r2, #200	@ 0xc8
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(2000);
 80008aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008ae:	f001 f80f 	bl	80018d0 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
 80008b2:	4b78      	ldr	r3, [pc, #480]	@ (8000a94 <main+0x22c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2264      	movs	r2, #100	@ 0x64
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 80008ba:	4b76      	ldr	r3, [pc, #472]	@ (8000a94 <main+0x22c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2264      	movs	r2, #100	@ 0x64
 80008c0:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(2000);
 80008c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c6:	f001 f803 	bl	80018d0 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick() - lastTime >= loopInterval)
 80008ca:	f000 fff5 	bl	80018b8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	4b71      	ldr	r3, [pc, #452]	@ (8000a98 <main+0x230>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	4b71      	ldr	r3, [pc, #452]	@ (8000a9c <main+0x234>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3f5      	bcc.n	80008ca <main+0x62>
	  {
		   MPU6050_Start(&MPU6050, &temp);
 80008de:	4970      	ldr	r1, [pc, #448]	@ (8000aa0 <main+0x238>)
 80008e0:	486b      	ldr	r0, [pc, #428]	@ (8000a90 <main+0x228>)
 80008e2:	f000 fc19 	bl	8001118 <MPU6050_Start>

		    error = setPoint - MPU6050.Pitch;
 80008e6:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa4 <main+0x23c>)
 80008e8:	ed93 7a00 	vldr	s14, [r3]
 80008ec:	4b68      	ldr	r3, [pc, #416]	@ (8000a90 <main+0x228>)
 80008ee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80008f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f6:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa8 <main+0x240>)
 80008f8:	edc3 7a00 	vstr	s15, [r3]
		    integral += error;
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <main+0x244>)
 80008fe:	ed93 7a00 	vldr	s14, [r3]
 8000902:	4b69      	ldr	r3, [pc, #420]	@ (8000aa8 <main+0x240>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090c:	4b67      	ldr	r3, [pc, #412]	@ (8000aac <main+0x244>)
 800090e:	edc3 7a00 	vstr	s15, [r3]

		    // Integral windup sınırı
		    if (integral > integralIn) integral = integralIn;
 8000912:	4b66      	ldr	r3, [pc, #408]	@ (8000aac <main+0x244>)
 8000914:	ed93 7a00 	vldr	s14, [r3]
 8000918:	4b65      	ldr	r3, [pc, #404]	@ (8000ab0 <main+0x248>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	dd03      	ble.n	8000930 <main+0xc8>
 8000928:	4b61      	ldr	r3, [pc, #388]	@ (8000ab0 <main+0x248>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a5f      	ldr	r2, [pc, #380]	@ (8000aac <main+0x244>)
 800092e:	6013      	str	r3, [r2, #0]
		    if (integral < -1 * integralIn) integral = -1 * integralIn;
 8000930:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab0 <main+0x248>)
 8000932:	edd3 7a00 	vldr	s15, [r3]
 8000936:	eeb1 7a67 	vneg.f32	s14, s15
 800093a:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <main+0x244>)
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000948:	dd07      	ble.n	800095a <main+0xf2>
 800094a:	4b59      	ldr	r3, [pc, #356]	@ (8000ab0 <main+0x248>)
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eef1 7a67 	vneg.f32	s15, s15
 8000954:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <main+0x244>)
 8000956:	edc3 7a00 	vstr	s15, [r3]

		    // Derivative hesapla
		    derivative = error - lastError;
 800095a:	4b53      	ldr	r3, [pc, #332]	@ (8000aa8 <main+0x240>)
 800095c:	ed93 7a00 	vldr	s14, [r3]
 8000960:	4b54      	ldr	r3, [pc, #336]	@ (8000ab4 <main+0x24c>)
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096a:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <main+0x250>)
 800096c:	edc3 7a00 	vstr	s15, [r3]
		    lastError = error;
 8000970:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <main+0x240>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab4 <main+0x24c>)
 8000976:	6013      	str	r3, [r2, #0]

		    // PID toplam çıkış
		    output = kp * error + ki * integral + kd * derivative;
 8000978:	4b50      	ldr	r3, [pc, #320]	@ (8000abc <main+0x254>)
 800097a:	ed93 7a00 	vldr	s14, [r3]
 800097e:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <main+0x240>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000988:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac0 <main+0x258>)
 800098a:	edd3 6a00 	vldr	s13, [r3]
 800098e:	4b47      	ldr	r3, [pc, #284]	@ (8000aac <main+0x244>)
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800099c:	4b49      	ldr	r3, [pc, #292]	@ (8000ac4 <main+0x25c>)
 800099e:	edd3 6a00 	vldr	s13, [r3]
 80009a2:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <main+0x250>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b0:	4b45      	ldr	r3, [pc, #276]	@ (8000ac8 <main+0x260>)
 80009b2:	edc3 7a00 	vstr	s15, [r3]

		    MotorOneValue = motorBaseSpeed + output;
 80009b6:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <main+0x264>)
 80009b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009c4:	4b40      	ldr	r3, [pc, #256]	@ (8000ac8 <main+0x260>)
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d2:	ee17 3a90 	vmov	r3, s15
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad0 <main+0x268>)
 80009da:	801a      	strh	r2, [r3, #0]
		    MotorTwoValue = motorBaseSpeed - output;
 80009dc:	4b3b      	ldr	r3, [pc, #236]	@ (8000acc <main+0x264>)
 80009de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ea:	4b37      	ldr	r3, [pc, #220]	@ (8000ac8 <main+0x260>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f8:	ee17 3a90 	vmov	r3, s15
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b35      	ldr	r3, [pc, #212]	@ (8000ad4 <main+0x26c>)
 8000a00:	801a      	strh	r2, [r3, #0]

		    if (MotorOneValue > Motor1Max) MotorOneValue = Motor1Max;
 8000a02:	4b33      	ldr	r3, [pc, #204]	@ (8000ad0 <main+0x268>)
 8000a04:	881a      	ldrh	r2, [r3, #0]
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <main+0x270>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d903      	bls.n	8000a16 <main+0x1ae>
 8000a0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <main+0x270>)
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <main+0x268>)
 8000a14:	801a      	strh	r2, [r3, #0]
		    if (MotorOneValue < Motor1Min) MotorOneValue = Motor1Min;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <main+0x268>)
 8000a18:	881a      	ldrh	r2, [r3, #0]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <main+0x274>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d203      	bcs.n	8000a2a <main+0x1c2>
 8000a22:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <main+0x274>)
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <main+0x268>)
 8000a28:	801a      	strh	r2, [r3, #0]

		    if (MotorTwoValue > Motor2Max) MotorTwoValue = Motor2Max;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <main+0x26c>)
 8000a2c:	881a      	ldrh	r2, [r3, #0]
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <main+0x278>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d903      	bls.n	8000a3e <main+0x1d6>
 8000a36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <main+0x278>)
 8000a38:	881a      	ldrh	r2, [r3, #0]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <main+0x26c>)
 8000a3c:	801a      	strh	r2, [r3, #0]
		    if (MotorTwoValue < Motor2Min) MotorTwoValue = Motor2Min;
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <main+0x26c>)
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <main+0x27c>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d203      	bcs.n	8000a52 <main+0x1ea>
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <main+0x27c>)
 8000a4c:	881a      	ldrh	r2, [r3, #0]
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <main+0x26c>)
 8000a50:	801a      	strh	r2, [r3, #0]

		    TIM3->CCR1 = MotorOneValue;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <main+0x268>)
 8000a54:	881a      	ldrh	r2, [r3, #0]
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <main+0x280>)
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
		    TIM3->CCR2 = MotorTwoValue;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <main+0x26c>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <main+0x280>)
 8000a60:	639a      	str	r2, [r3, #56]	@ 0x38

		    if(uwTick - TimeLed > 500)
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <main+0x284>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <main+0x288>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a70:	d908      	bls.n	8000a84 <main+0x21c>
		    {
		    	HAL_GPIO_TogglePin(UserLed_GPIO_Port, UserLed_Pin);
 8000a72:	2120      	movs	r1, #32
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f001 f9ca 	bl	8001e10 <HAL_GPIO_TogglePin>
		    	TimeLed = uwTick;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <main+0x284>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <main+0x288>)
 8000a82:	6013      	str	r3, [r2, #0]
		    }

		    lastTime = HAL_GetTick();
 8000a84:	f000 ff18 	bl	80018b8 <HAL_GetTick>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <main+0x230>)
 8000a8c:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - lastTime >= loopInterval)
 8000a8e:	e71c      	b.n	80008ca <main+0x62>
 8000a90:	200000f4 	.word	0x200000f4
 8000a94:	2000015c 	.word	0x2000015c
 8000a98:	20000158 	.word	0x20000158
 8000a9c:	20000020 	.word	0x20000020
 8000aa0:	20000134 	.word	0x20000134
 8000aa4:	2000013c 	.word	0x2000013c
 8000aa8:	20000140 	.word	0x20000140
 8000aac:	20000144 	.word	0x20000144
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	2000014c 	.word	0x2000014c
 8000ab8:	20000148 	.word	0x20000148
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000000c 	.word	0x2000000c
 8000ac8:	20000150 	.word	0x20000150
 8000acc:	20000014 	.word	0x20000014
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000016 	.word	0x20000016
 8000adc:	20000018 	.word	0x20000018
 8000ae0:	2000001a 	.word	0x2000001a
 8000ae4:	2000001c 	.word	0x2000001c
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	20000258 	.word	0x20000258
 8000af0:	20000154 	.word	0x20000154

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	@ 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	2238      	movs	r2, #56	@ 0x38
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fafc 	bl	8005100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f002 f9d0 	bl	8002ebc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b36:	2355      	movs	r3, #85	@ 0x55
 8000b38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fa6a 	bl	8003024 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b56:	f000 f818 	bl	8000b8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2104      	movs	r1, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fd68 	bl	8003648 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b7e:	f000 f804 	bl	8000b8a <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	@ 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
}
 8000b90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b92:	bf00      	nop
 8000b94:	e7fd      	b.n	8000b92 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bce:	f002 fa19 	bl	8003004 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 fe2d 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c96:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000c98:	4a33      	ldr	r2, [pc, #204]	@ (8000d68 <MX_TIM3_Init+0x104>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 8000c9c:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000c9e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000caa:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cac:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cbe:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cc0:	f003 f8f4 	bl	8003eac <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f7ff ff5e 	bl	8000b8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4822      	ldr	r0, [pc, #136]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cdc:	f003 fbc4 	bl	8004468 <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ce6:	f7ff ff50 	bl	8000b8a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cea:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000cec:	f003 f935 	bl	8003f5a <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cf6:	f7ff ff48 	bl	8000b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4816      	ldr	r0, [pc, #88]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000d0a:	f004 f963 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d14:	f7ff ff39 	bl	8000b8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	@ 0x60
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000d30:	f003 fa86 	bl	8004240 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d3a:	f7ff ff26 	bl	8000b8a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000d46:	f003 fa7b 	bl	8004240 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d50:	f7ff ff1b 	bl	8000b8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <MX_TIM3_Init+0x100>)
 8000d56:	f000 f829 	bl	8000dac <HAL_TIM_MspPostInit>

}
 8000d5a:	bf00      	nop
 8000d5c:	3738      	adds	r7, #56	@ 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000015c 	.word	0x2000015c
 8000d68:	40000400 	.word	0x40000400

08000d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_TIM_Base_MspInit+0x38>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10b      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <HAL_TIM_MspPostInit+0x64>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11c      	bne.n	8000e08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000de6:	2350      	movs	r3, #80	@ 0x50
 8000de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f000 fe6a 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40021000 	.word	0x40021000

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff ff10 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 f969 	bl	800511c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fd0d 	bl	8000868 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e5c:	080068fc 	.word	0x080068fc
  ldr r2, =_sbss
 8000e60:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e64:	20000394 	.word	0x20000394

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>

08000e6a <IIRFirstOrder_Init>:

#include "IIR_filter.h"
#include "MPU_V2.1.h"


void IIRFirstOrder_Init(IIRFirstOrder *filter, float alpha) {
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	ed87 0a00 	vstr	s0, [r7]
	/*IIR filter Alpha is 0-1 it depends your Sampling time */
	filter->alpha = alpha;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
	filter->beta= (1-filter->alpha);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->out   = 0.0f;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <IIRFirstOrder_Filter>:

float IIRFirstOrder_Filter(IIRFirstOrder *filter, float input) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	ed87 0a00 	vstr	s0, [r7]
	filter->out = filter->alpha * filter->out + filter->beta * input;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	ed93 7a00 	vldr	s14, [r3]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ec6:	edd7 7a00 	vldr	s15, [r7]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	edc3 7a02 	vstr	s15, [r3, #8]
	return filter->out;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	ee07 3a90 	vmov	s15, r3
}
 8000ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <MPU6050_Init>:





void MPU6050_Init(Accel_Gyro *MPU6050 , Fs_sel_e Gyro_range, Afs_sel_e Acc_range){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	70bb      	strb	r3, [r7, #2]


     /* Gyroscope , Accelerometer Range and Division coefficient choice */
	switch (Gyro_range){
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d826      	bhi.n	8000f54 <MPU6050_Init+0x64>
 8000f06:	a201      	add	r2, pc, #4	@ (adr r2, 8000f0c <MPU6050_Init+0x1c>)
 8000f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f2b 	.word	0x08000f2b
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f47 	.word	0x08000f47
	case FS_250 : DATA_GYRO_CONFIG = 0x00 ; MPU6050->Div_coef_gyr  = 131.0f  ; break ;
 8000f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80010d8 <MPU6050_Init+0x1e8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a6d      	ldr	r2, [pc, #436]	@ (80010dc <MPU6050_Init+0x1ec>)
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f28:	e01b      	b.n	8000f62 <MPU6050_Init+0x72>
	case FS_500 : DATA_GYRO_CONFIG = 0x08 ; MPU6050->Div_coef_gyr  = 65.50f   ; break ;
 8000f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80010d8 <MPU6050_Init+0x1e8>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a6b      	ldr	r2, [pc, #428]	@ (80010e0 <MPU6050_Init+0x1f0>)
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f36:	e014      	b.n	8000f62 <MPU6050_Init+0x72>
	case FS_1000: DATA_GYRO_CONFIG = 0x10 ; MPU6050->Div_coef_gyr  = 32.80f   ; break ;
 8000f38:	4b67      	ldr	r3, [pc, #412]	@ (80010d8 <MPU6050_Init+0x1e8>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a68      	ldr	r2, [pc, #416]	@ (80010e4 <MPU6050_Init+0x1f4>)
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f44:	e00d      	b.n	8000f62 <MPU6050_Init+0x72>
	case FS_2000: DATA_GYRO_CONFIG = 0x18 ; MPU6050->Div_coef_gyr  = 16.40f   ; break ;
 8000f46:	4b64      	ldr	r3, [pc, #400]	@ (80010d8 <MPU6050_Init+0x1e8>)
 8000f48:	2218      	movs	r2, #24
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a66      	ldr	r2, [pc, #408]	@ (80010e8 <MPU6050_Init+0x1f8>)
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f52:	e006      	b.n	8000f62 <MPU6050_Init+0x72>

	default:   DATA_GYRO_CONFIG = 0x00 ; MPU6050->Div_coef_gyr  = 131.0f  ; break ;
 8000f54:	4b60      	ldr	r3, [pc, #384]	@ (80010d8 <MPU6050_Init+0x1e8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80010dc <MPU6050_Init+0x1ec>)
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f60:	bf00      	nop

	}


	switch (Acc_range){
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d82b      	bhi.n	8000fc0 <MPU6050_Init+0xd0>
 8000f68:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <MPU6050_Init+0x80>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	08000fb1 	.word	0x08000fb1

	case AFS_2G: DATA_ACCEL_CONFIG = 0x00 ; MPU6050->Div_coef_acc = 16384.0f ; break ;
 8000f80:	4b5a      	ldr	r3, [pc, #360]	@ (80010ec <MPU6050_Init+0x1fc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f8e:	e01e      	b.n	8000fce <MPU6050_Init+0xde>
	case AFS_4G: DATA_ACCEL_CONFIG = 0x08 ; MPU6050->Div_coef_acc = 8192.0f  ; break ;
 8000f90:	4b56      	ldr	r3, [pc, #344]	@ (80010ec <MPU6050_Init+0x1fc>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f9e:	e016      	b.n	8000fce <MPU6050_Init+0xde>
	case AFS_8G: DATA_ACCEL_CONFIG = 0x10 ; MPU6050->Div_coef_acc = 4096.0f  ; break ;
 8000fa0:	4b52      	ldr	r3, [pc, #328]	@ (80010ec <MPU6050_Init+0x1fc>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fae:	e00e      	b.n	8000fce <MPU6050_Init+0xde>
	case AFS_16G:DATA_ACCEL_CONFIG=  0x18 ; MPU6050->Div_coef_acc = 2048.0f  ; break ;
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80010ec <MPU6050_Init+0x1fc>)
 8000fb2:	2218      	movs	r2, #24
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fbe:	e006      	b.n	8000fce <MPU6050_Init+0xde>

	default:   DATA_ACCEL_CONFIG = 0x00 ; MPU6050->Div_coef_acc  = 16384.0f;
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80010ec <MPU6050_Init+0x1fc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	/*Device Configuration  */


  while(!(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_I2C_ADRESS_AD0, TRIALS, TIMEOUT)==HAL_OK));
 8000fce:	bf00      	nop
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	21d0      	movs	r1, #208	@ 0xd0
 8000fd6:	4846      	ldr	r0, [pc, #280]	@ (80010f0 <MPU6050_Init+0x200>)
 8000fd8:	f001 faf2 	bl	80025c0 <HAL_I2C_IsDeviceReady>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f6      	bne.n	8000fd0 <MPU6050_Init+0xe0>

  /* Power manangment All bits are zero -> 0x00 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, PWR_MGMT_1 ,SIZE_OF_ADDRES,&DATA_PWR_MGTM1,  SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000fe2:	bf00      	nop
 8000fe4:	2364      	movs	r3, #100	@ 0x64
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <MPU6050_Init+0x204>)
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	226b      	movs	r2, #107	@ 0x6b
 8000ff4:	21d0      	movs	r1, #208	@ 0xd0
 8000ff6:	483e      	ldr	r0, [pc, #248]	@ (80010f0 <MPU6050_Init+0x200>)
 8000ff8:	f001 f9ce 	bl	8002398 <HAL_I2C_Mem_Write>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <MPU6050_Init+0xf4>
  /* Sample Rate Configuration (1kHz) -> 0x07 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, SMPLRT_DIV ,SIZE_OF_ADDRES,&DATA_SMPRT_DIV , SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8001002:	bf00      	nop
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <MPU6050_Init+0x208>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2219      	movs	r2, #25
 8001014:	21d0      	movs	r1, #208	@ 0xd0
 8001016:	4836      	ldr	r0, [pc, #216]	@ (80010f0 <MPU6050_Init+0x200>)
 8001018:	f001 f9be 	bl	8002398 <HAL_I2C_Mem_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <MPU6050_Init+0x114>
  /* Inertial Low pass Configuration ,this bits gives  actual bandwidth to us (Accelerometer 184 Hz - Gyroscope 188Hz ~= 200Hz  T=0.005) -> 0x01 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, CONFIG ,SIZE_OF_ADDRES,&DATA_DLPF_CFG , SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8001022:	bf00      	nop
 8001024:	2364      	movs	r3, #100	@ 0x64
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MPU6050_Init+0x20c>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	221a      	movs	r2, #26
 8001034:	21d0      	movs	r1, #208	@ 0xd0
 8001036:	482e      	ldr	r0, [pc, #184]	@ (80010f0 <MPU6050_Init+0x200>)
 8001038:	f001 f9ae 	bl	8002398 <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <MPU6050_Init+0x134>
  /* Accelerometer Configuration that you desire in Init function -> XXXX */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, ACCEL_CONFIG ,SIZE_OF_ADDRES, &DATA_ACCEL_CONFIG, SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8001042:	bf00      	nop
 8001044:	2364      	movs	r3, #100	@ 0x64
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <MPU6050_Init+0x1fc>)
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	221c      	movs	r2, #28
 8001054:	21d0      	movs	r1, #208	@ 0xd0
 8001056:	4826      	ldr	r0, [pc, #152]	@ (80010f0 <MPU6050_Init+0x200>)
 8001058:	f001 f99e 	bl	8002398 <HAL_I2C_Mem_Write>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <MPU6050_Init+0x154>
  /* Gyroscope Configuration that you desire in Init function-> XXXX */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, GYRO_CONFIG ,SIZE_OF_ADDRES, &DATA_GYRO_CONFIG, SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8001062:	bf00      	nop
 8001064:	2364      	movs	r3, #100	@ 0x64
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MPU6050_Init+0x1e8>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	221b      	movs	r2, #27
 8001074:	21d0      	movs	r1, #208	@ 0xd0
 8001076:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <MPU6050_Init+0x200>)
 8001078:	f001 f98e 	bl	8002398 <HAL_I2C_Mem_Write>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <MPU6050_Init+0x174>

  /*First Order IIR filter Initializing*/
  for(int n=0 ;n<3;n++)
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01a      	b.n	80010be <MPU6050_Init+0x1ce>
  {

	  IIRFirstOrder_Init(&LpfAccel[n], LpfAccel_ALPHA);
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <MPU6050_Init+0x210>)
 8001094:	4413      	add	r3, r2
 8001096:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001104 <MPU6050_Init+0x214>
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fee5 	bl	8000e6a <IIRFirstOrder_Init>

      IIRFirstOrder_Init(&LpfGyro [n], LpfGyro_ALPHA );
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <MPU6050_Init+0x218>)
 80010ac:	4413      	add	r3, r2
 80010ae:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800110c <MPU6050_Init+0x21c>
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fed9 	bl	8000e6a <IIRFirstOrder_Init>
  for(int n=0 ;n<3;n++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	dde1      	ble.n	8001088 <MPU6050_Init+0x198>


   }
  /*Counter start for Sampling Period*/
  get_last_time1 = HAL_GetTick();
 80010c4:	f000 fbf8 	bl	80018b8 <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <MPU6050_Init+0x220>)
 80010cc:	6013      	str	r3, [r2, #0]


}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001f4 	.word	0x200001f4
 80010dc:	43030000 	.word	0x43030000
 80010e0:	42830000 	.word	0x42830000
 80010e4:	42033333 	.word	0x42033333
 80010e8:	41833333 	.word	0x41833333
 80010ec:	200001f5 	.word	0x200001f5
 80010f0:	200000a0 	.word	0x200000a0
 80010f4:	200001f6 	.word	0x200001f6
 80010f8:	20000029 	.word	0x20000029
 80010fc:	2000002a 	.word	0x2000002a
 8001100:	200001ac 	.word	0x200001ac
 8001104:	3f3afba0 	.word	0x3f3afba0
 8001108:	200001d0 	.word	0x200001d0
 800110c:	3f54052f 	.word	0x3f54052f
 8001110:	200001a8 	.word	0x200001a8
 8001114:	00000000 	.word	0x00000000

08001118 <MPU6050_Start>:
void MPU6050_Start(Accel_Gyro*MPU6050 , Temperature *temp){
 8001118:	b580      	push	{r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]



	           MPU6050_READ(GYRO_XOUT_H, rxbuff, 6);
 8001126:	2206      	movs	r2, #6
 8001128:	498d      	ldr	r1, [pc, #564]	@ (8001360 <MPU6050_Start+0x248>)
 800112a:	2043      	movs	r0, #67	@ 0x43
 800112c:	f000 fa26 	bl	800157c <MPU6050_READ>


	           MPU6050->GYRO_OUT_RAW[0] = (int16_t) ( (rxbuff[0] << 8) | rxbuff[1]);
 8001130:	4b8b      	ldr	r3, [pc, #556]	@ (8001360 <MPU6050_Start+0x248>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b21b      	sxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b89      	ldr	r3, [pc, #548]	@ (8001360 <MPU6050_Start+0x248>)
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	80da      	strh	r2, [r3, #6]
	           MPU6050->GYRO_OUT_RAW[1] = (int16_t) ( (rxbuff[2] << 8) | rxbuff[3]);
 8001148:	4b85      	ldr	r3, [pc, #532]	@ (8001360 <MPU6050_Start+0x248>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	b21b      	sxth	r3, r3
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b83      	ldr	r3, [pc, #524]	@ (8001360 <MPU6050_Start+0x248>)
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	811a      	strh	r2, [r3, #8]
	           MPU6050->GYRO_OUT_RAW[2] = (int16_t) ( (rxbuff[4] << 8) | rxbuff[5]);
 8001160:	4b7f      	ldr	r3, [pc, #508]	@ (8001360 <MPU6050_Start+0x248>)
 8001162:	791b      	ldrb	r3, [r3, #4]
 8001164:	b21b      	sxth	r3, r3
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b7d      	ldr	r3, [pc, #500]	@ (8001360 <MPU6050_Start+0x248>)
 800116c:	795b      	ldrb	r3, [r3, #5]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	815a      	strh	r2, [r3, #10]


	           gyro_dps[0] =  (float)((MPU6050->GYRO_OUT_RAW [0] / MPU6050->Div_coef_gyr ));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800118c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001190:	4b74      	ldr	r3, [pc, #464]	@ (8001364 <MPU6050_Start+0x24c>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
	           gyro_dps[1] =  (float)((MPU6050->GYRO_OUT_RAW [1] / MPU6050->Div_coef_gyr ));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80011aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <MPU6050_Start+0x24c>)
 80011b0:	edc3 7a01 	vstr	s15, [r3, #4]
	           gyro_dps[2] =  (float)((MPU6050->GYRO_OUT_RAW [2] / MPU6050->Div_coef_gyr ));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80011c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011cc:	4b65      	ldr	r3, [pc, #404]	@ (8001364 <MPU6050_Start+0x24c>)
 80011ce:	edc3 7a02 	vstr	s15, [r3, #8]


	           /*First Order IIR filter Update for Gyroscope*/
	           for(int i =0 ; i<3;i++){
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e022      	b.n	800121e <MPU6050_Start+0x106>
	        	   IIRFirstOrder_Filter(&LpfGyro[i], gyro_dps[i]);
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4a61      	ldr	r2, [pc, #388]	@ (8001368 <MPU6050_Start+0x250>)
 80011e4:	441a      	add	r2, r3
 80011e6:	495f      	ldr	r1, [pc, #380]	@ (8001364 <MPU6050_Start+0x24c>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff fe54 	bl	8000ea4 <IIRFirstOrder_Filter>
	        	   filtered_gyro_dps[i]= LpfGyro[i].out;
 80011fc:	495a      	ldr	r1, [pc, #360]	@ (8001368 <MPU6050_Start+0x250>)
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3308      	adds	r3, #8
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4957      	ldr	r1, [pc, #348]	@ (800136c <MPU6050_Start+0x254>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	601a      	str	r2, [r3, #0]
	           for(int i =0 ; i<3;i++){
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b02      	cmp	r3, #2
 8001222:	ddd9      	ble.n	80011d8 <MPU6050_Start+0xc0>
	           }




	           MPU6050->Xgy +=  (filtered_gyro_dps[0] -  GYRO_BIAS_X) * DPS_2_RPS * Sampling_Per  ;     //GyroX *dt
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a06 	vldr	s14, [r3, #24]
 800122a:	4b50      	ldr	r3, [pc, #320]	@ (800136c <MPU6050_Start+0x254>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001370 <MPU6050_Start+0x258>
 8001234:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001238:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001374 <MPU6050_Start+0x25c>
 800123c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001240:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001378 <MPU6050_Start+0x260>
 8001244:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a06 	vstr	s15, [r3, #24]
	           MPU6050->Ygy +=  (filtered_gyro_dps[1] -  GYRO_BIAS_Y) * DPS_2_RPS * Sampling_Per  ;     //GyroY *dt
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed93 7a07 	vldr	s14, [r3, #28]
 8001258:	4b44      	ldr	r3, [pc, #272]	@ (800136c <MPU6050_Start+0x254>)
 800125a:	edd3 7a01 	vldr	s15, [r3, #4]
 800125e:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800137c <MPU6050_Start+0x264>
 8001262:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001266:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001374 <MPU6050_Start+0x25c>
 800126a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800126e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001378 <MPU6050_Start+0x260>
 8001272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edc3 7a07 	vstr	s15, [r3, #28]
	           MPU6050->Zgy +=  (filtered_gyro_dps[2] -  GYRO_BIAS_Z) * DPS_2_RPS * Sampling_Per  ;     //GyroZ *dt
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	ed93 7a08 	vldr	s14, [r3, #32]
 8001286:	4b39      	ldr	r3, [pc, #228]	@ (800136c <MPU6050_Start+0x254>)
 8001288:	edd3 7a02 	vldr	s15, [r3, #8]
 800128c:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001380 <MPU6050_Start+0x268>
 8001290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001294:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001374 <MPU6050_Start+0x25c>
 8001298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800129c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001378 <MPU6050_Start+0x260>
 80012a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edc3 7a08 	vstr	s15, [r3, #32]


	           MPU6050_READ(ACCEL_XOUT_H, rxbuff2, 6);
 80012ae:	2206      	movs	r2, #6
 80012b0:	4934      	ldr	r1, [pc, #208]	@ (8001384 <MPU6050_Start+0x26c>)
 80012b2:	203b      	movs	r0, #59	@ 0x3b
 80012b4:	f000 f962 	bl	800157c <MPU6050_READ>


	           MPU6050->ACCEL_OUT_RAW[0] = ((int16_t)(rxbuff2[0] << 8 | rxbuff2[1]));
 80012b8:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <MPU6050_Start+0x26c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <MPU6050_Start+0x26c>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	801a      	strh	r2, [r3, #0]
	           MPU6050->ACCEL_OUT_RAW[1] = ((int16_t)(rxbuff2[2] << 8 | rxbuff2[3]));
 80012d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <MPU6050_Start+0x26c>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <MPU6050_Start+0x26c>)
 80012dc:	78db      	ldrb	r3, [r3, #3]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	805a      	strh	r2, [r3, #2]
	           MPU6050->ACCEL_OUT_RAW[2] = ((int16_t)(rxbuff2[4] << 8 | rxbuff2[5]));
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <MPU6050_Start+0x26c>)
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <MPU6050_Start+0x26c>)
 80012f4:	795b      	ldrb	r3, [r3, #5]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	809a      	strh	r2, [r3, #4]

	           accel_g[0] = (float)((MPU6050->ACCEL_OUT_RAW[0]/MPU6050->Div_coef_acc));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MPU6050_Start+0x270>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
	           accel_g[1] = (float)((MPU6050->ACCEL_OUT_RAW[1]/MPU6050->Div_coef_acc));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MPU6050_Start+0x270>)
 8001338:	edc3 7a01 	vstr	s15, [r3, #4]
	           accel_g[2] = (float)((MPU6050->ACCEL_OUT_RAW[2]/MPU6050->Div_coef_acc));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MPU6050_Start+0x270>)
 8001356:	edc3 7a02 	vstr	s15, [r3, #8]

	           /*First Order IIR filter Update for Accelerometer*/

	           for (int j=0; j<3  ; j++){
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	e038      	b.n	80013d2 <MPU6050_Start+0x2ba>
 8001360:	200001f8 	.word	0x200001f8
 8001364:	20000228 	.word	0x20000228
 8001368:	200001d0 	.word	0x200001d0
 800136c:	20000210 	.word	0x20000210
 8001370:	3efced3f 	.word	0x3efced3f
 8001374:	3c8efa35 	.word	0x3c8efa35
 8001378:	3ba3d70a 	.word	0x3ba3d70a
 800137c:	3fb3799b 	.word	0x3fb3799b
 8001380:	3d867582 	.word	0x3d867582
 8001384:	20000200 	.word	0x20000200
 8001388:	20000234 	.word	0x20000234
	        	   IIRFirstOrder_Filter(&LpfAccel[j], accel_g[j]);
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4a6a      	ldr	r2, [pc, #424]	@ (8001540 <MPU6050_Start+0x428>)
 8001398:	441a      	add	r2, r3
 800139a:	496a      	ldr	r1, [pc, #424]	@ (8001544 <MPU6050_Start+0x42c>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	4610      	mov	r0, r2
 80013ac:	f7ff fd7a 	bl	8000ea4 <IIRFirstOrder_Filter>

	        	    filtered_accel_g[j] =LpfAccel[j].out;
 80013b0:	4963      	ldr	r1, [pc, #396]	@ (8001540 <MPU6050_Start+0x428>)
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3308      	adds	r3, #8
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4961      	ldr	r1, [pc, #388]	@ (8001548 <MPU6050_Start+0x430>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	601a      	str	r2, [r3, #0]
	           for (int j=0; j<3  ; j++){
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	ddd9      	ble.n	800138c <MPU6050_Start+0x274>

	           }
	           /*Scale and Bias factors implementation*/

	           MPU6050->Xacc =    ACCEL_SCALE_X * filtered_accel_g[0] + ACCEL_BIAS_X;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 80013d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001548 <MPU6050_Start+0x430>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800154c <MPU6050_Start+0x434>
 80013e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001550 <MPU6050_Start+0x438>
 80013ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a03 	vstr	s15, [r3, #12]
	           MPU6050->Yacc =    ACCEL_SCALE_Y * filtered_accel_g[1] + ACCEL_BIAS_Y;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 80013f4:	4b54      	ldr	r3, [pc, #336]	@ (8001548 <MPU6050_Start+0x430>)
 80013f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001554 <MPU6050_Start+0x43c>
 80013fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001402:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001558 <MPU6050_Start+0x440>
 8001406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a04 	vstr	s15, [r3, #16]
	           MPU6050->Zacc =    ACCEL_SCALE_Z * filtered_accel_g[2] + ACCEL_BIAS_Z;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 8001410:	4b4d      	ldr	r3, [pc, #308]	@ (8001548 <MPU6050_Start+0x430>)
 8001412:	edd3 7a02 	vldr	s15, [r3, #8]
 8001416:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800155c <MPU6050_Start+0x444>
 800141a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001560 <MPU6050_Start+0x448>
 8001422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edc3 7a05 	vstr	s15, [r3, #20]

	           /*Temperature calculations*/
	           MPU6050_READ(TEMP_OUT_H , rxbuff3, 2);
 800142c:	2202      	movs	r2, #2
 800142e:	494d      	ldr	r1, [pc, #308]	@ (8001564 <MPU6050_Start+0x44c>)
 8001430:	2041      	movs	r0, #65	@ 0x41
 8001432:	f000 f8a3 	bl	800157c <MPU6050_READ>

	           temp->Temp_Raw = (int16_t)(rxbuff3[0] <<8 | rxbuff3[1]);
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <MPU6050_Start+0x44c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b21b      	sxth	r3, r3
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b48      	ldr	r3, [pc, #288]	@ (8001564 <MPU6050_Start+0x44c>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21a      	sxth	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	801a      	strh	r2, [r3, #0]
	           temp->Temperature =(float)((temp->Temp_Raw / 340) + 36.53);/*Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53*/
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	4a44      	ldr	r2, [pc, #272]	@ (8001568 <MPU6050_Start+0x450>)
 8001456:	fb82 1203 	smull	r1, r2, r2, r3
 800145a:	11d2      	asrs	r2, r2, #7
 800145c:	17db      	asrs	r3, r3, #31
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f82a 	bl	80004bc <__aeabi_i2d>
 8001468:	a333      	add	r3, pc, #204	@ (adr r3, 8001538 <MPU6050_Start+0x420>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe fed9 	bl	8000224 <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff f889 	bl	8000590 <__aeabi_d2f>
 800147e:	4602      	mov	r2, r0
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	605a      	str	r2, [r3, #4]

	           /*Total 3D vector Magnitude for angles calculations*/

	           Magnitude =  sqrtf(powf(MPU6050->Xacc,2.0f) +  powf(MPU6050->Yacc,2.0f) + powf(MPU6050->Zacc , 2.0f));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 7a03 	vldr	s15, [r3, #12]
 800148a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	f003 fe93 	bl	80051bc <powf>
 8001496:	eeb0 8a40 	vmov.f32	s16, s0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a04 	vldr	s15, [r3, #16]
 80014a0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	f003 fe88 	bl	80051bc <powf>
 80014ac:	eef0 7a40 	vmov.f32	s15, s0
 80014b0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ba:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f003 fe7b 	bl	80051bc <powf>
 80014c6:	eef0 7a40 	vmov.f32	s15, s0
 80014ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014ce:	eeb0 0a67 	vmov.f32	s0, s15
 80014d2:	f003 fecb 	bl	800526c <sqrtf>
 80014d6:	eef0 7a40 	vmov.f32	s15, s0
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <MPU6050_Start+0x454>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]


	           Error_calc(MPU6050, Magnitude);
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <MPU6050_Start+0x454>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f930 	bl	8001750 <Error_calc>



	           Complementary_filter(MPU6050);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f865 	bl	80015c0 <Complementary_filter>



	           /*Measuring  Sampling period for bandwidth -> T =0.005 , 200Hz*/

	           delta_t1 = (float)(HAL_GetTick() - get_last_time1) / 1000 ;
 80014f6:	f000 f9df 	bl	80018b8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MPU6050_Start+0x458>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001574 <MPU6050_Start+0x45c>
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MPU6050_Start+0x460>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	           get_last_time1 = HAL_GetTick();
 8001518:	f000 f9ce 	bl	80018b8 <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <MPU6050_Start+0x458>)
 8001520:	6013      	str	r3, [r2, #0]
	           HAL_Delay(2);
 8001522:	2002      	movs	r0, #2
 8001524:	f000 f9d4 	bl	80018d0 <HAL_Delay>


}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	ecbd 8b02 	vpop	{d8}
 8001532:	bd80      	pop	{r7, pc}
 8001534:	f3af 8000 	nop.w
 8001538:	0a3d70a4 	.word	0x0a3d70a4
 800153c:	404243d7 	.word	0x404243d7
 8001540:	200001ac 	.word	0x200001ac
 8001544:	20000234 	.word	0x20000234
 8001548:	2000021c 	.word	0x2000021c
 800154c:	3f812400 	.word	0x3f812400
 8001550:	3d88cbf7 	.word	0x3d88cbf7
 8001554:	3f80ee96 	.word	0x3f80ee96
 8001558:	3bb92ae2 	.word	0x3bb92ae2
 800155c:	3f881906 	.word	0x3f881906
 8001560:	3e40a920 	.word	0x3e40a920
 8001564:	20000208 	.word	0x20000208
 8001568:	60606061 	.word	0x60606061
 800156c:	2000020c 	.word	0x2000020c
 8001570:	200001a8 	.word	0x200001a8
 8001574:	447a0000 	.word	0x447a0000
 8001578:	20000240 	.word	0x20000240

0800157c <MPU6050_READ>:




void MPU6050_READ(uint8_t RegAddress , uint8_t *Rxbuffer, uint8_t size){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]

	uint8_t Txbuffer[1];


	Txbuffer[0]=RegAddress;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_I2C_ADRESS_AD0, Txbuffer, SIZE_OF_DATA, TIMEOUT);
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	2364      	movs	r3, #100	@ 0x64
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	21d0      	movs	r1, #208	@ 0xd0
 800159c:	4807      	ldr	r0, [pc, #28]	@ (80015bc <MPU6050_READ+0x40>)
 800159e:	f000 fced 	bl	8001f7c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MPU6050_I2C_ADRESS_AD0, Rxbuffer, size, TIMEOUT);
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2264      	movs	r2, #100	@ 0x64
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <MPU6050_READ+0x40>)
 80015b0:	f000 fdfc 	bl	80021ac <HAL_I2C_Master_Receive>

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000a0 	.word	0x200000a0

080015c0 <Complementary_filter>:


void Complementary_filter(Accel_Gyro *MPU6050){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	ed2d 8b02 	vpush	{d8}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]


    /* from 3D vector to angle using arcsin , if you choose correct vectors, you can use any method atan2f(arctan) or other terms*/
    roll_acc  = asinf(  MPU6050->Xacc / Magnitude);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80015d2:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <Complementary_filter+0x168>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015dc:	eeb0 0a66 	vmov.f32	s0, s13
 80015e0:	f003 fdc0 	bl	8005164 <asinf>
 80015e4:	eef0 7a40 	vmov.f32	s15, s0
 80015e8:	4b50      	ldr	r3, [pc, #320]	@ (800172c <Complementary_filter+0x16c>)
 80015ea:	edc3 7a00 	vstr	s15, [r3]
    pitch_acc = asinf( -MPU6050->Yacc / Magnitude);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015f4:	eeb1 7a67 	vneg.f32	s14, s15
 80015f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001728 <Complementary_filter+0x168>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	f003 fdad 	bl	8005164 <asinf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <Complementary_filter+0x170>)
 8001610:	edc3 7a00 	vstr	s15, [r3]

    roll_gyro  = MPU6050->Xgy;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a46      	ldr	r2, [pc, #280]	@ (8001734 <Complementary_filter+0x174>)
 800161a:	6013      	str	r3, [r2, #0]
    pitch_gyro = MPU6050->Ygy;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	4a45      	ldr	r2, [pc, #276]	@ (8001738 <Complementary_filter+0x178>)
 8001622:	6013      	str	r3, [r2, #0]

    /*Axis shifting*/

    roll_gyro  -=  pitch_gyro * sinf(MPU6050->Zgy);
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <Complementary_filter+0x174>)
 8001626:	ed93 8a00 	vldr	s16, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	f003 fe40 	bl	80052b8 <sinf>
 8001638:	eeb0 7a40 	vmov.f32	s14, s0
 800163c:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <Complementary_filter+0x178>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	ee78 7a67 	vsub.f32	s15, s16, s15
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <Complementary_filter+0x174>)
 800164c:	edc3 7a00 	vstr	s15, [r3]
    pitch_gyro +=  roll_gyro  * sinf(MPU6050->Zgy);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edd3 7a08 	vldr	s15, [r3, #32]
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f003 fe2d 	bl	80052b8 <sinf>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <Complementary_filter+0x174>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <Complementary_filter+0x178>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <Complementary_filter+0x178>)
 8001678:	edc3 7a00 	vstr	s15, [r3]

    /*Initiliaze first values*/
    initial_check = (initial_check == not_initiliazed) ? inital_roll_pitch(): initiliazed ;
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <Complementary_filter+0x17c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d104      	bne.n	800168e <Complementary_filter+0xce>
 8001684:	f000 f89c 	bl	80017c0 <inital_roll_pitch>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	e000      	b.n	8001690 <Complementary_filter+0xd0>
 800168e:	2200      	movs	r2, #0
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <Complementary_filter+0x17c>)
 8001692:	701a      	strb	r2, [r3, #0]


    roll_gyro = ( (  (roll_gyro  )   * (1- ALPHA) ) + ALPHA  *  roll_acc ) * RAD_2_DEG;
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <Complementary_filter+0x174>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001740 <Complementary_filter+0x180>
 800169e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <Complementary_filter+0x16c>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001744 <Complementary_filter+0x184>
 80016ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001748 <Complementary_filter+0x188>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <Complementary_filter+0x174>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
    pitch_gyro= ( (  (pitch_gyro )   * (1- ALPHA) ) + ALPHA  *  pitch_acc) * RAD_2_DEG;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <Complementary_filter+0x178>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001740 <Complementary_filter+0x180>
 80016cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <Complementary_filter+0x170>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001744 <Complementary_filter+0x184>
 80016da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001748 <Complementary_filter+0x188>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <Complementary_filter+0x178>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
    Yaw = (MPU6050->Zgy)*RAD_2_DEG;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80016f6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001748 <Complementary_filter+0x188>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <Complementary_filter+0x18c>)
 8001700:	edc3 7a00 	vstr	s15, [r3]



    MPU6050->Roll  = roll_gyro ;
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <Complementary_filter+0x174>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
    MPU6050->Pitch = pitch_gyro;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <Complementary_filter+0x178>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	631a      	str	r2, [r3, #48]	@ 0x30
    MPU6050->Yaw   =   Yaw     ; // We can  use sensor fusion algorithm with Magnetometer for reach more correct Yaw axis.
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <Complementary_filter+0x18c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	ecbd 8b02 	vpop	{d8}
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000020c 	.word	0x2000020c
 800172c:	20000244 	.word	0x20000244
 8001730:	20000248 	.word	0x20000248
 8001734:	2000024c 	.word	0x2000024c
 8001738:	20000250 	.word	0x20000250
 800173c:	20000028 	.word	0x20000028
 8001740:	3a031400 	.word	0x3a031400
 8001744:	3f7fdf3b 	.word	0x3f7fdf3b
 8001748:	42652ee1 	.word	0x42652ee1
 800174c:	20000254 	.word	0x20000254

08001750 <Error_calc>:


void Error_calc(Accel_Gyro*MPU6050, float mag /*magnitude*/){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	ed87 0a00 	vstr	s0, [r7]

	/*Absolute value */

	 (mag < 0 ? (mag *=-1) : (mag *=1));
 800175c:	edd7 7a00 	vldr	s15, [r7]
 8001760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d505      	bpl.n	8001776 <Error_calc+0x26>
 800176a:	edd7 7a00 	vldr	s15, [r7]
 800176e:	eef1 7a67 	vneg.f32	s15, s15
 8001772:	edc7 7a00 	vstr	s15, [r7]

	 MPU6050->Accel_Error_percent = (1-mag) * 100;
 8001776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177a:	edd7 7a00 	vldr	s15, [r7]
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001782:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80017bc <Error_calc+0x6c>
 8001786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	 MPU6050->Gyro_Error_val  = (  MPU6050->Xgy +  MPU6050->Ygy +   MPU6050->Zgy );
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ed93 7a06 	vldr	s14, [r3, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edd3 7a07 	vldr	s15, [r3, #28]
 800179c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	42c80000 	.word	0x42c80000

080017c0 <inital_roll_pitch>:


Inital_check inital_roll_pitch(){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

pitch_gyro = pitch_acc ;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <inital_roll_pitch+0x20>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <inital_roll_pitch+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
roll_gyro  = roll_acc ;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <inital_roll_pitch+0x28>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <inital_roll_pitch+0x2c>)
 80017d2:	6013      	str	r3, [r2, #0]

return  initiliazed ;}
 80017d4:	2300      	movs	r3, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000248 	.word	0x20000248
 80017e4:	20000250 	.word	0x20000250
 80017e8:	20000244 	.word	0x20000244
 80017ec:	2000024c 	.word	0x2000024c

080017f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f000 f93c 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001800:	200f      	movs	r0, #15
 8001802:	f000 f80d 	bl	8001820 <HAL_InitTick>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	e001      	b.n	8001816 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001812:	f7ff f9c1 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001816:	79fb      	ldrb	r3, [r7, #7]

}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <HAL_InitTick+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d022      	beq.n	800187a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_InitTick+0x6c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_InitTick+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001840:	fbb1 f3f3 	udiv	r3, r1, r3
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f93a 	bl	8001ac2 <HAL_SYSTICK_Config>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10f      	bne.n	8001874 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d809      	bhi.n	800186e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185a:	2200      	movs	r2, #0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	f04f 30ff 	mov.w	r0, #4294967295
 8001862:	f000 f914 	bl	8001a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_InitTick+0x70>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e007      	b.n	800187e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e004      	b.n	800187e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000030 	.word	0x20000030
 800188c:	20000024 	.word	0x20000024
 8001890:	2000002c 	.word	0x2000002c

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_IncTick+0x1c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x20>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <HAL_IncTick+0x1c>)
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20000258 	.word	0x20000258
 80018b4:	20000030 	.word	0x20000030

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000258 	.word	0x20000258

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d004      	beq.n	80018f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_Delay+0x40>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f4:	bf00      	nop
 80018f6:	f7ff ffdf 	bl	80018b8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8f7      	bhi.n	80018f6 <HAL_Delay+0x26>
  {
  }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000030 	.word	0x20000030

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	@ (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	@ 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff47 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff5e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff90 	bl	80019cc <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5f 	bl	8001978 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffb2 	bl	8001a34 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aea:	e15a      	b.n	8001da2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 814c 	beq.w	8001d9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0201 	and.w	r2, r3, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	6939      	ldr	r1, [r7, #16]
 8001c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a6 	beq.w	8001d9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc0 <HAL_GPIO_Init+0x2e4>)
 8001c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c54:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc0 <HAL_GPIO_Init+0x2e4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5c:	4b58      	ldr	r3, [pc, #352]	@ (8001dc0 <HAL_GPIO_Init+0x2e4>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c68:	4a56      	ldr	r2, [pc, #344]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c92:	d01f      	beq.n	8001cd4 <HAL_GPIO_Init+0x1f8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc8 <HAL_GPIO_Init+0x2ec>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d019      	beq.n	8001cd0 <HAL_GPIO_Init+0x1f4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4b      	ldr	r2, [pc, #300]	@ (8001dcc <HAL_GPIO_Init+0x2f0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_GPIO_Init+0x1f0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <HAL_GPIO_Init+0x2f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00d      	beq.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a49      	ldr	r2, [pc, #292]	@ (8001dd4 <HAL_GPIO_Init+0x2f8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a48      	ldr	r2, [pc, #288]	@ (8001dd8 <HAL_GPIO_Init+0x2fc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_GPIO_Init+0x1e4>
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	e00a      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	e008      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1fa>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce6:	4937      	ldr	r1, [pc, #220]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf4:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d18:	4a30      	ldr	r2, [pc, #192]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d42:	4a26      	ldr	r2, [pc, #152]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d96:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <HAL_GPIO_Init+0x300>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f47f ae9d 	bne.w	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	48000800 	.word	0x48000800
 8001dd0:	48000c00 	.word	0x48000c00
 8001dd4:	48001000 	.word	0x48001000
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43d9      	mvns	r1, r3
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	400b      	ands	r3, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e08d      	b.n	8001f72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fc86 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	@ 0x24
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d108      	bne.n	8001ee6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	e007      	b.n	8001ef6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69d9      	ldr	r1, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	461a      	mov	r2, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	817b      	strh	r3, [r7, #10]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	f040 80fd 	bne.w	8002198 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Master_Transmit+0x30>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0f6      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fc80 	bl	80018b8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2319      	movs	r3, #25
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fc5e 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e1      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2221      	movs	r2, #33	@ 0x21
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	893a      	ldrh	r2, [r7, #8]
 8001ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2bff      	cmp	r3, #255	@ 0xff
 8002006:	d906      	bls.n	8002016 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	22ff      	movs	r2, #255	@ 0xff
 800200c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800200e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e007      	b.n	8002026 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002024:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d024      	beq.n	8002078 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	8979      	ldrh	r1, [r7, #10]
 800206a:	4b4e      	ldr	r3, [pc, #312]	@ (80021a4 <HAL_I2C_Master_Transmit+0x228>)
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fe59 	bl	8002d28 <I2C_TransferConfig>
 8002076:	e066      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	b2da      	uxtb	r2, r3
 800207e:	8979      	ldrh	r1, [r7, #10]
 8002080:	4b48      	ldr	r3, [pc, #288]	@ (80021a4 <HAL_I2C_Master_Transmit+0x228>)
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fe4e 	bl	8002d28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800208c:	e05b      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fc51 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07b      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d034      	beq.n	8002146 <HAL_I2C_Master_Transmit+0x1ca>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d130      	bne.n	8002146 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fbca 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e04d      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2bff      	cmp	r3, #255	@ 0xff
 8002106:	d90e      	bls.n	8002126 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	22ff      	movs	r2, #255	@ 0xff
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fe02 	bl	8002d28 <I2C_TransferConfig>
 8002124:	e00f      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	b2da      	uxtb	r2, r3
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fdf1 	bl	8002d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d19e      	bne.n	800208e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fc37 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e01a      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_I2C_Master_Transmit+0x22c>)
 8002178:	400b      	ands	r3, r1
 800217a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	80002000 	.word	0x80002000
 80021a8:	fe00e800 	.word	0xfe00e800

080021ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	460b      	mov	r3, r1
 80021ba:	817b      	strh	r3, [r7, #10]
 80021bc:	4613      	mov	r3, r2
 80021be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	f040 80db 	bne.w	8002384 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2C_Master_Receive+0x30>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0d4      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021e4:	f7ff fb68 	bl	80018b8 <HAL_GetTick>
 80021e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2319      	movs	r3, #25
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb46 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0bf      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2222      	movs	r2, #34	@ 0x22
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2210      	movs	r2, #16
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	893a      	ldrh	r2, [r7, #8]
 8002226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	2bff      	cmp	r3, #255	@ 0xff
 8002236:	d90e      	bls.n	8002256 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	22ff      	movs	r2, #255	@ 0xff
 800223c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002242:	b2da      	uxtb	r2, r3
 8002244:	8979      	ldrh	r1, [r7, #10]
 8002246:	4b52      	ldr	r3, [pc, #328]	@ (8002390 <HAL_I2C_Master_Receive+0x1e4>)
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fd6a 	bl	8002d28 <I2C_TransferConfig>
 8002254:	e06d      	b.n	8002332 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002264:	b2da      	uxtb	r2, r3
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	4b49      	ldr	r3, [pc, #292]	@ (8002390 <HAL_I2C_Master_Receive+0x1e4>)
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fd59 	bl	8002d28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002276:	e05c      	b.n	8002332 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fbe7 	bl	8002a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e07c      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d034      	beq.n	8002332 <HAL_I2C_Master_Receive+0x186>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d130      	bne.n	8002332 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fad4 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e04d      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2bff      	cmp	r3, #255	@ 0xff
 80022f2:	d90e      	bls.n	8002312 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	22ff      	movs	r2, #255	@ 0xff
 80022f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	2300      	movs	r3, #0
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fd0c 	bl	8002d28 <I2C_TransferConfig>
 8002310:	e00f      	b.n	8002332 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	2300      	movs	r3, #0
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fcfb 	bl	8002d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d19d      	bne.n	8002278 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	6a39      	ldr	r1, [r7, #32]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fb41 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e01a      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_I2C_Master_Receive+0x1e8>)
 8002364:	400b      	ands	r3, r1
 8002366:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	80002400 	.word	0x80002400
 8002394:	fe00e800 	.word	0xfe00e800

08002398 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	817b      	strh	r3, [r7, #10]
 80023aa:	460b      	mov	r3, r1
 80023ac:	813b      	strh	r3, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 80f9 	bne.w	80025b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_I2C_Mem_Write+0x34>
 80023c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0ed      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Mem_Write+0x4e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0e6      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ee:	f7ff fa63 	bl	80018b8 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2319      	movs	r3, #25
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fa41 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d1      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2221      	movs	r2, #33	@ 0x21
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002438:	88f8      	ldrh	r0, [r7, #6]
 800243a:	893a      	ldrh	r2, [r7, #8]
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4603      	mov	r3, r0
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f9a5 	bl	8002798 <I2C_RequestMemoryWrite>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0a9      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	@ 0xff
 8002468:	d90e      	bls.n	8002488 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	@ 0xff
 800246e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fc51 	bl	8002d28 <I2C_TransferConfig>
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	b2da      	uxtb	r2, r3
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fc40 	bl	8002d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa44 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e07b      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d034      	beq.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d130      	bne.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	2180      	movs	r1, #128	@ 0x80
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f9bd 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e04d      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2bff      	cmp	r3, #255	@ 0xff
 8002520:	d90e      	bls.n	8002540 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	22ff      	movs	r2, #255	@ 0xff
 8002526:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fbf5 	bl	8002d28 <I2C_TransferConfig>
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fbe4 	bl	8002d28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d19e      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa2a 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e01a      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <HAL_I2C_Mem_Write+0x224>)
 8002592:	400b      	ands	r3, r1
 8002594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	fe00e800 	.word	0xfe00e800

080025c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b20      	cmp	r3, #32
 80025de:	f040 80d6 	bne.w	800278e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f0:	d101      	bne.n	80025f6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0cc      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2C_IsDeviceReady+0x44>
 8002600:	2302      	movs	r3, #2
 8002602:	e0c5      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_I2C_IsDeviceReady+0x72>
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800262c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002630:	e006      	b.n	8002640 <HAL_I2C_IsDeviceReady+0x80>
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002638:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800263c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002646:	f7ff f937 	bl	80018b8 <HAL_GetTick>
 800264a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b20      	cmp	r3, #32
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002678:	e034      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d01a      	beq.n	80026b8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff f919 	bl	80018b8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <HAL_I2C_IsDeviceReady+0xd8>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e06b      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_I2C_IsDeviceReady+0x130>
 80026ea:	7fbb      	ldrb	r3, [r7, #30]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0c4      	beq.n	800267a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d01a      	beq.n	8002734 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2120      	movs	r1, #32
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f8bd 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e03b      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2220      	movs	r2, #32
 800271e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e02d      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	2120      	movs	r1, #32
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8a2 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e020      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	f63f af56 	bhi.w	800261a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <I2C_RequestMemoryWrite+0xa4>)
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fab1 	bl	8002d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f8b5 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02c      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80027ea:	e015      	b.n	8002818 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	69b9      	ldr	r1, [r7, #24]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f89b 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e012      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800280e:	893b      	ldrh	r3, [r7, #8]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2200      	movs	r2, #0
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f830 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	80002000 	.word	0x80002000

08002840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	619a      	str	r2, [r3, #24]
  }
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002898:	e03b      	b.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f962 	bl	8002b68 <I2C_IsErrorOccurred>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d02d      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe ffff 	bl	80018b8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d122      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d113      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0b4      	beq.n	800289a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002946:	e033      	b.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f90b 	bl	8002b68 <I2C_IsErrorOccurred>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e031      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d025      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe ffa8 	bl	80018b8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11a      	bne.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d013      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d1c4      	bne.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d4:	e02f      	b.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f8c4 	bl	8002b68 <I2C_IsErrorOccurred>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02d      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe ff65 	bl	80018b8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d013      	beq.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d1c8      	bne.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a60:	e071      	b.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f87e 	bl	8002b68 <I2C_IsErrorOccurred>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d13b      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d138      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d105      	bne.n	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d121      	bne.n	8002af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2204      	movs	r2, #4
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
 8002af4:	e002      	b.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002afc:	f7fe fedc 	bl	80018b8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d302      	bcc.n	8002b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d00f      	beq.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d002      	beq.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d083      	beq.n	8002a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d068      	beq.n	8002c66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b9c:	e049      	b.n	8002c32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d045      	beq.n	8002c32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fe fe87 	bl	80018b8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_IsErrorOccurred+0x54>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d13a      	bne.n	8002c32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bde:	d121      	bne.n	8002c24 <I2C_IsErrorOccurred+0xbc>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be6:	d01d      	beq.n	8002c24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d01a      	beq.n	8002c24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bfe:	f7fe fe5b 	bl	80018b8 <HAL_GetTick>
 8002c02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	e00e      	b.n	8002c24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c06:	f7fe fe57 	bl	80018b8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b19      	cmp	r3, #25
 8002c12:	d907      	bls.n	8002c24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c22:	e006      	b.n	8002c32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d1e9      	bne.n	8002c06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d003      	beq.n	8002c48 <I2C_IsErrorOccurred+0xe0>
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0aa      	beq.n	8002b9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2220      	movs	r2, #32
 8002c56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002caa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ccc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01c      	beq.n	8002d16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fdaf 	bl	8002840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <I2C_IsErrorOccurred+0x1bc>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3728      	adds	r7, #40	@ 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	4613      	mov	r3, r2
 8002d38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d40:	7a7b      	ldrb	r3, [r7, #9]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	0d5b      	lsrs	r3, r3, #21
 8002d62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <I2C_TransferConfig+0x60>)
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	ea02 0103 	and.w	r1, r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	03ff63ff 	.word	0x03ff63ff

08002d8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d138      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e032      	b.n	8002e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	@ 0x24
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d139      	bne.n	8002eac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e033      	b.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2224      	movs	r2, #36	@ 0x24
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d141      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d131      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed8:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ede:	4a46      	ldr	r2, [pc, #280]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ee4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee8:	4b43      	ldr	r3, [pc, #268]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ef0:	4a41      	ldr	r2, [pc, #260]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef8:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2232      	movs	r2, #50	@ 0x32
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a3f      	ldr	r2, [pc, #252]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	e002      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f16:	4b38      	ldr	r3, [pc, #224]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d102      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f2      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2a:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f36:	d158      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e057      	b.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f42:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f4c:	e04d      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f54:	d141      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d131      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6a:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f74:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2232      	movs	r2, #50	@ 0x32
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9b      	lsrs	r3, r3, #18
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	e002      	b.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa2:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d102      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f2      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d112      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e011      	b.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fd8:	e007      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe2:	4a05      	ldr	r2, [pc, #20]	@ (8002ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fe8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	20000024 	.word	0x20000024
 8003000:	431bde83 	.word	0x431bde83

08003004 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800300e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003012:	6093      	str	r3, [r2, #8]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40007000 	.word	0x40007000

08003024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e2fe      	b.n	8003634 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d075      	beq.n	800312e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003042:	4b97      	ldr	r3, [pc, #604]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304c:	4b94      	ldr	r3, [pc, #592]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0x3e>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d002      	beq.n	8003068 <HAL_RCC_OscConfig+0x44>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d10b      	bne.n	8003080 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	4b8d      	ldr	r3, [pc, #564]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d05b      	beq.n	800312c <HAL_RCC_OscConfig+0x108>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d157      	bne.n	800312c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e2d9      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x74>
 800308a:	4b85      	ldr	r3, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a84      	ldr	r2, [pc, #528]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xb0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x98>
 80030a2:	4b7f      	ldr	r3, [pc, #508]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7e      	ldr	r2, [pc, #504]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b7c      	ldr	r3, [pc, #496]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7b      	ldr	r2, [pc, #492]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xb0>
 80030bc:	4b78      	ldr	r3, [pc, #480]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b75      	ldr	r3, [pc, #468]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a74      	ldr	r2, [pc, #464]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fbec 	bl	80018b8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe fbe8 	bl	80018b8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	@ 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e29e      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f6:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xc0>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fbd8 	bl	80018b8 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fbd4 	bl	80018b8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e28a      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800311e:	4b60      	ldr	r3, [pc, #384]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0xe8>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b59      	ldr	r3, [pc, #356]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	4b56      	ldr	r3, [pc, #344]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d102      	bne.n	800315a <HAL_RCC_OscConfig+0x136>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d002      	beq.n	8003160 <HAL_RCC_OscConfig+0x13c>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11f      	bne.n	80031a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	4b4f      	ldr	r3, [pc, #316]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x154>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e25d      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b49      	ldr	r3, [pc, #292]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	4946      	ldr	r1, [pc, #280]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800318c:	4b45      	ldr	r3, [pc, #276]	@ (80032a4 <HAL_RCC_OscConfig+0x280>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fb45 	bl	8001820 <HAL_InitTick>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d043      	beq.n	8003224 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e249      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d023      	beq.n	80031f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b3d      	ldr	r3, [pc, #244]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3c      	ldr	r2, [pc, #240]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe fb80 	bl	80018b8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031bc:	f7fe fb7c 	bl	80018b8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e232      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ce:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b31      	ldr	r3, [pc, #196]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	492d      	ldr	r1, [pc, #180]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
 80031ee:	e01a      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 80031f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fb5c 	bl	80018b8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe fb58 	bl	80018b8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e20e      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x1e0>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d041      	beq.n	80032b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01c      	beq.n	8003274 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe fb35 	bl	80018b8 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003252:	f7fe fb31 	bl	80018b8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1e7      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003264:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ef      	beq.n	8003252 <HAL_RCC_OscConfig+0x22e>
 8003272:	e020      	b.n	80032b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327a:	4a09      	ldr	r2, [pc, #36]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fb18 	bl	80018b8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800328a:	e00d      	b.n	80032a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fe fb14 	bl	80018b8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d906      	bls.n	80032a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1ca      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	4b8c      	ldr	r3, [pc, #560]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ea      	bne.n	800328c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a6 	beq.w	8003410 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032c8:	4b84      	ldr	r3, [pc, #528]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2b4>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x2b6>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	4a7e      	ldr	r2, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ea:	4b7c      	ldr	r3, [pc, #496]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fa:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <HAL_RCC_OscConfig+0x4bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003306:	4b76      	ldr	r3, [pc, #472]	@ (80034e0 <HAL_RCC_OscConfig+0x4bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	@ (80034e0 <HAL_RCC_OscConfig+0x4bc>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe fad1 	bl	80018b8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe facd 	bl	80018b8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e183      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332c:	4b6c      	ldr	r3, [pc, #432]	@ (80034e0 <HAL_RCC_OscConfig+0x4bc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_RCC_OscConfig+0x32e>
 8003340:	4b66      	ldr	r3, [pc, #408]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	4a65      	ldr	r2, [pc, #404]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003350:	e024      	b.n	800339c <HAL_RCC_OscConfig+0x378>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d110      	bne.n	800337c <HAL_RCC_OscConfig+0x358>
 800335a:	4b60      	ldr	r3, [pc, #384]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	4a5e      	ldr	r2, [pc, #376]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800336a:	4b5c      	ldr	r3, [pc, #368]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	4a5a      	ldr	r2, [pc, #360]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800337a:	e00f      	b.n	800339c <HAL_RCC_OscConfig+0x378>
 800337c:	4b57      	ldr	r3, [pc, #348]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	4a56      	ldr	r2, [pc, #344]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800338c:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a52      	ldr	r2, [pc, #328]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fa88 	bl	80018b8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe fa84 	bl	80018b8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e138      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c2:	4b46      	ldr	r3, [pc, #280]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ed      	beq.n	80033ac <HAL_RCC_OscConfig+0x388>
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe fa71 	bl	80018b8 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fa6d 	bl	80018b8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e121      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f0:	4b3a      	ldr	r3, [pc, #232]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ed      	bne.n	80033da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	4a34      	ldr	r2, [pc, #208]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800340e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800342a:	4a2c      	ldr	r2, [pc, #176]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe fa40 	bl	80018b8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343c:	f7fe fa3c 	bl	80018b8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0f2      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344e:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003450:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <HAL_RCC_OscConfig+0x418>
 800345c:	e01b      	b.n	8003496 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800345e:	4b1f      	ldr	r3, [pc, #124]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003460:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003464:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fe fa23 	bl	80018b8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003476:	f7fe fa1f 	bl	80018b8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0d5      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80c9 	beq.w	8003632 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	f000 8083 	beq.w	80035b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d15e      	bne.n	8003574 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe f9f9 	bl	80018b8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	e00c      	b.n	80034e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe f9f5 	bl	80018b8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d905      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0ab      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e4:	4b55      	ldr	r3, [pc, #340]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ec      	bne.n	80034ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b52      	ldr	r3, [pc, #328]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	4b52      	ldr	r3, [pc, #328]	@ (8003640 <HAL_RCC_OscConfig+0x61c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6a11      	ldr	r1, [r2, #32]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003500:	3a01      	subs	r2, #1
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800350a:	0212      	lsls	r2, r2, #8
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0552      	lsls	r2, r2, #21
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800352a:	06d2      	lsls	r2, r2, #27
 800352c:	430a      	orrs	r2, r1
 800352e:	4943      	ldr	r1, [pc, #268]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b41      	ldr	r3, [pc, #260]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a40      	ldr	r2, [pc, #256]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b3e      	ldr	r3, [pc, #248]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a3d      	ldr	r2, [pc, #244]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f9b4 	bl	80018b8 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f9b0 	bl	80018b8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e066      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b35      	ldr	r3, [pc, #212]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x530>
 8003572:	e05e      	b.n	8003632 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b31      	ldr	r3, [pc, #196]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe f99a 	bl	80018b8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f996 	bl	80018b8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04c      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359a:	4b28      	ldr	r3, [pc, #160]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	4924      	ldr	r1, [pc, #144]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_RCC_OscConfig+0x620>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
 80035b2:	e03e      	b.n	8003632 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e039      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035c0:	4b1e      	ldr	r3, [pc, #120]	@ (800363c <HAL_RCC_OscConfig+0x618>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d12c      	bne.n	800362e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	3b01      	subs	r3, #1
 80035e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d123      	bne.n	800362e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d11b      	bne.n	800362e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d113      	bne.n	800362e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d109      	bne.n	800362e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	019f800c 	.word	0x019f800c
 8003644:	feeefffc 	.word	0xfeeefffc

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e11e      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b91      	ldr	r3, [pc, #580]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d910      	bls.n	8003690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b8e      	ldr	r3, [pc, #568]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	498c      	ldr	r1, [pc, #560]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b8a      	ldr	r3, [pc, #552]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e106      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d073      	beq.n	8003784 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b81      	ldr	r3, [pc, #516]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0f4      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036b4:	f000 f966 	bl	8003984 <RCC_GetSysClockFreqFromPLLSource>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a7c      	ldr	r2, [pc, #496]	@ (80038b0 <HAL_RCC_ClockConfig+0x268>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d93f      	bls.n	8003742 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036c2:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d033      	beq.n	8003742 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d12f      	bne.n	8003742 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036e2:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ea:	4a70      	ldr	r2, [pc, #448]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80036ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e024      	b.n	8003742 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0c6      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003710:	4b66      	ldr	r3, [pc, #408]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0be      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003720:	f000 f8ce 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8003724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4a61      	ldr	r2, [pc, #388]	@ (80038b0 <HAL_RCC_ClockConfig+0x268>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d909      	bls.n	8003742 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800372e:	4b5f      	ldr	r3, [pc, #380]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003736:	4a5d      	ldr	r2, [pc, #372]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b5a      	ldr	r3, [pc, #360]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4957      	ldr	r1, [pc, #348]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fe f8b0 	bl	80018b8 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fe f8ac 	bl	80018b8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e095      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b4e      	ldr	r3, [pc, #312]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a42      	ldr	r2, [pc, #264]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037b4:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037bc:	4a3b      	ldr	r2, [pc, #236]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b39      	ldr	r3, [pc, #228]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4936      	ldr	r1, [pc, #216]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
 80037d6:	e008      	b.n	80037ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d105      	bne.n	80037ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037de:	4b33      	ldr	r3, [pc, #204]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 80037e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ea:	4b2f      	ldr	r3, [pc, #188]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d21d      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f8:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 020f 	bic.w	r2, r3, #15
 8003800:	4929      	ldr	r1, [pc, #164]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003808:	f7fe f856 	bl	80018b8 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe f852 	bl	80018b8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e03b      	b.n	800389e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_RCC_ClockConfig+0x260>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d1ed      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4917      	ldr	r1, [pc, #92]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490f      	ldr	r1, [pc, #60]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003872:	f000 f825 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_ClockConfig+0x264>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <HAL_RCC_ClockConfig+0x26c>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <HAL_RCC_ClockConfig+0x270>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <HAL_RCC_ClockConfig+0x274>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd ffc2 	bl	8001820 <HAL_InitTick>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	04c4b400 	.word	0x04c4b400
 80038b4:	080064f8 	.word	0x080064f8
 80038b8:	20000024 	.word	0x20000024
 80038bc:	2000002c 	.word	0x2000002c

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d102      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038d2:	4b2a      	ldr	r3, [pc, #168]	@ (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e047      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038e4:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e03e      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038ea:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d136      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d10c      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003914:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	4a16      	ldr	r2, [pc, #88]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800391e:	68d2      	ldr	r2, [r2, #12]
 8003920:	0a12      	lsrs	r2, r2, #8
 8003922:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	617b      	str	r3, [r7, #20]
      break;
 800392c:	e00c      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800392e:	4a13      	ldr	r2, [pc, #76]	@ (800397c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4a10      	ldr	r2, [pc, #64]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	0a12      	lsrs	r2, r2, #8
 800393c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
      break;
 8003946:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0e5b      	lsrs	r3, r3, #25
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e001      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003968:	693b      	ldr	r3, [r7, #16]
}
 800396a:	4618      	mov	r0, r3
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d10c      	bne.n	80039c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a8:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b2:	68d2      	ldr	r2, [r2, #12]
 80039b4:	0a12      	lsrs	r2, r2, #8
 80039b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
    break;
 80039c0:	e00c      	b.n	80039dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c2:	4a12      	ldr	r2, [pc, #72]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039cc:	68d2      	ldr	r2, [r2, #12]
 80039ce:	0a12      	lsrs	r2, r2, #8
 80039d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]
    break;
 80039da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0e5b      	lsrs	r3, r3, #25
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039f6:	687b      	ldr	r3, [r7, #4]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40021000 	.word	0x40021000
 8003a08:	007a1200 	.word	0x007a1200
 8003a0c:	00f42400 	.word	0x00f42400

08003a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a18:	2300      	movs	r3, #0
 8003a1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8098 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b43      	ldr	r3, [pc, #268]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b40      	ldr	r3, [pc, #256]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	4a3f      	ldr	r2, [pc, #252]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a39      	ldr	r2, [pc, #228]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a66:	f7fd ff27 	bl	80018b8 <HAL_GetTick>
 8003a6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6c:	e009      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fd ff23 	bl	80018b8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d902      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a80:	e005      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a82:	4b30      	ldr	r3, [pc, #192]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ef      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d159      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a94:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01e      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d019      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab0:	4b23      	ldr	r3, [pc, #140]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003abc:	4b20      	ldr	r3, [pc, #128]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003acc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003adc:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd fee3 	bl	80018b8 <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	e00b      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fedf 	bl	80018b8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d902      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ec      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	4903      	ldr	r1, [pc, #12]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	74bb      	strb	r3, [r7, #18]
 8003b3e:	e005      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4c:	7c7b      	ldrb	r3, [r7, #17]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b52:	4ba7      	ldr	r3, [pc, #668]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	4aa6      	ldr	r2, [pc, #664]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6a:	4ba1      	ldr	r3, [pc, #644]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f023 0203 	bic.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	499d      	ldr	r1, [pc, #628]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b8c:	4b98      	ldr	r3, [pc, #608]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f023 020c 	bic.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4995      	ldr	r1, [pc, #596]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bae:	4b90      	ldr	r3, [pc, #576]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	498c      	ldr	r1, [pc, #560]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd0:	4b87      	ldr	r3, [pc, #540]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4984      	ldr	r1, [pc, #528]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	497b      	ldr	r1, [pc, #492]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c14:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	4973      	ldr	r1, [pc, #460]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c36:	4b6e      	ldr	r3, [pc, #440]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	496a      	ldr	r1, [pc, #424]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c58:	4b65      	ldr	r3, [pc, #404]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4962      	ldr	r1, [pc, #392]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	4959      	ldr	r1, [pc, #356]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c9c:	4b54      	ldr	r3, [pc, #336]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	4951      	ldr	r1, [pc, #324]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	4948      	ldr	r1, [pc, #288]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce0:	4b43      	ldr	r3, [pc, #268]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	4940      	ldr	r1, [pc, #256]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b3b      	ldr	r3, [pc, #236]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a3a      	ldr	r2, [pc, #232]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d18:	4b35      	ldr	r3, [pc, #212]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	4932      	ldr	r1, [pc, #200]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d50:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	4924      	ldr	r1, [pc, #144]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d015      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d88:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	4916      	ldr	r1, [pc, #88]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da6:	d105      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	4908      	ldr	r1, [pc, #32]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de0:	4b03      	ldr	r3, [pc, #12]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a02      	ldr	r2, [pc, #8]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dea:	60d3      	str	r3, [r2, #12]
 8003dec:	e002      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e00:	4b29      	ldr	r3, [pc, #164]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	4926      	ldr	r1, [pc, #152]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e46:	4918      	ldr	r1, [pc, #96]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e58:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7e:	490a      	ldr	r1, [pc, #40]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e049      	b.n	8003f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ff4a 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fbd2 	bl	8004694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e049      	b.n	8004000 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f841 	bl	8004008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 fb7b 	bl	8004694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_TIM_PWM_Start+0x24>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e03c      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d109      	bne.n	800405a <HAL_TIM_PWM_Start+0x3e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e02f      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d109      	bne.n	8004074 <HAL_TIM_PWM_Start+0x58>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e022      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d109      	bne.n	800408e <HAL_TIM_PWM_Start+0x72>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e015      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e008      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0a6      	b.n	8004210 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xb6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d0:	e023      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start+0xc6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e0:	e01b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0xe6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xf6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ff30 	bl	8004f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3a      	ldr	r2, [pc, #232]	@ (8004218 <HAL_TIM_PWM_Start+0x1fc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_TIM_PWM_Start+0x148>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a39      	ldr	r2, [pc, #228]	@ (800421c <HAL_TIM_PWM_Start+0x200>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_TIM_PWM_Start+0x148>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a37      	ldr	r2, [pc, #220]	@ (8004220 <HAL_TIM_PWM_Start+0x204>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_PWM_Start+0x148>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a36      	ldr	r2, [pc, #216]	@ (8004224 <HAL_TIM_PWM_Start+0x208>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIM_PWM_Start+0x148>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a34      	ldr	r2, [pc, #208]	@ (8004228 <HAL_TIM_PWM_Start+0x20c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_PWM_Start+0x148>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a33      	ldr	r2, [pc, #204]	@ (800422c <HAL_TIM_PWM_Start+0x210>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_TIM_PWM_Start+0x14c>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_TIM_PWM_Start+0x14e>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a25      	ldr	r2, [pc, #148]	@ (8004218 <HAL_TIM_PWM_Start+0x1fc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d01d      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <HAL_TIM_PWM_Start+0x214>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <HAL_TIM_PWM_Start+0x218>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <HAL_TIM_PWM_Start+0x21c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	@ (800421c <HAL_TIM_PWM_Start+0x200>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a18      	ldr	r2, [pc, #96]	@ (8004220 <HAL_TIM_PWM_Start+0x204>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_TIM_PWM_Start+0x1b2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a18      	ldr	r2, [pc, #96]	@ (800422c <HAL_TIM_PWM_Start+0x210>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d115      	bne.n	80041fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_TIM_PWM_Start+0x220>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b06      	cmp	r3, #6
 80041de:	d015      	beq.n	800420c <HAL_TIM_PWM_Start+0x1f0>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e6:	d011      	beq.n	800420c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e008      	b.n	800420c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e000      	b.n	800420e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40013400 	.word	0x40013400
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800
 800422c:	40015000 	.word	0x40015000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	00010007 	.word	0x00010007

08004240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425a:	2302      	movs	r3, #2
 800425c:	e0ff      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b14      	cmp	r3, #20
 800426a:	f200 80f0 	bhi.w	800444e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080042c9 	.word	0x080042c9
 8004278:	0800444f 	.word	0x0800444f
 800427c:	0800444f 	.word	0x0800444f
 8004280:	0800444f 	.word	0x0800444f
 8004284:	08004309 	.word	0x08004309
 8004288:	0800444f 	.word	0x0800444f
 800428c:	0800444f 	.word	0x0800444f
 8004290:	0800444f 	.word	0x0800444f
 8004294:	0800434b 	.word	0x0800434b
 8004298:	0800444f 	.word	0x0800444f
 800429c:	0800444f 	.word	0x0800444f
 80042a0:	0800444f 	.word	0x0800444f
 80042a4:	0800438b 	.word	0x0800438b
 80042a8:	0800444f 	.word	0x0800444f
 80042ac:	0800444f 	.word	0x0800444f
 80042b0:	0800444f 	.word	0x0800444f
 80042b4:	080043cd 	.word	0x080043cd
 80042b8:	0800444f 	.word	0x0800444f
 80042bc:	0800444f 	.word	0x0800444f
 80042c0:	0800444f 	.word	0x0800444f
 80042c4:	0800440d 	.word	0x0800440d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa94 	bl	80047fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0204 	bic.w	r2, r2, #4
 80042f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	619a      	str	r2, [r3, #24]
      break;
 8004306:	e0a5      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fb0e 	bl	8004930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6999      	ldr	r1, [r3, #24]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	021a      	lsls	r2, r3, #8
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	619a      	str	r2, [r3, #24]
      break;
 8004348:	e084      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fb81 	bl	8004a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0208 	orr.w	r2, r2, #8
 8004364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0204 	bic.w	r2, r2, #4
 8004374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	61da      	str	r2, [r3, #28]
      break;
 8004388:	e064      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fbf3 	bl	8004b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69d9      	ldr	r1, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	021a      	lsls	r2, r3, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	61da      	str	r2, [r3, #28]
      break;
 80043ca:	e043      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fc66 	bl	8004ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0208 	orr.w	r2, r2, #8
 80043e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0204 	bic.w	r2, r2, #4
 80043f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800440a:	e023      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fcb0 	bl	8004d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004426:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004436:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800444c:	e002      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
      break;
 8004452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800445c:	7dfb      	ldrb	r3, [r7, #23]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIM_ConfigClockSource+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e0f6      	b.n	8004672 <HAL_TIM_ConfigClockSource+0x20a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80044a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6f      	ldr	r2, [pc, #444]	@ (800467c <HAL_TIM_ConfigClockSource+0x214>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	f000 80c1 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 80044c4:	4a6d      	ldr	r2, [pc, #436]	@ (800467c <HAL_TIM_ConfigClockSource+0x214>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f200 80c6 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 80044cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004680 <HAL_TIM_ConfigClockSource+0x218>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f000 80b9 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 80044d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004680 <HAL_TIM_ConfigClockSource+0x218>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f200 80be 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 80044dc:	4a69      	ldr	r2, [pc, #420]	@ (8004684 <HAL_TIM_ConfigClockSource+0x21c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f000 80b1 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 80044e4:	4a67      	ldr	r2, [pc, #412]	@ (8004684 <HAL_TIM_ConfigClockSource+0x21c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f200 80b6 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 80044ec:	4a66      	ldr	r2, [pc, #408]	@ (8004688 <HAL_TIM_ConfigClockSource+0x220>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	f000 80a9 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 80044f4:	4a64      	ldr	r2, [pc, #400]	@ (8004688 <HAL_TIM_ConfigClockSource+0x220>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	f200 80ae 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 80044fc:	4a63      	ldr	r2, [pc, #396]	@ (800468c <HAL_TIM_ConfigClockSource+0x224>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	f000 80a1 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004504:	4a61      	ldr	r2, [pc, #388]	@ (800468c <HAL_TIM_ConfigClockSource+0x224>)
 8004506:	4293      	cmp	r3, r2
 8004508:	f200 80a6 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 800450c:	4a60      	ldr	r2, [pc, #384]	@ (8004690 <HAL_TIM_ConfigClockSource+0x228>)
 800450e:	4293      	cmp	r3, r2
 8004510:	f000 8099 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004514:	4a5e      	ldr	r2, [pc, #376]	@ (8004690 <HAL_TIM_ConfigClockSource+0x228>)
 8004516:	4293      	cmp	r3, r2
 8004518:	f200 809e 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 800451c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004520:	f000 8091 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004524:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004528:	f200 8096 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 800452c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004530:	f000 8089 	beq.w	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004538:	f200 808e 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004540:	d03e      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x158>
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004546:	f200 8087 	bhi.w	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454e:	f000 8086 	beq.w	800465e <HAL_TIM_ConfigClockSource+0x1f6>
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004556:	d87f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004558:	2b70      	cmp	r3, #112	@ 0x70
 800455a:	d01a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x12a>
 800455c:	2b70      	cmp	r3, #112	@ 0x70
 800455e:	d87b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004560:	2b60      	cmp	r3, #96	@ 0x60
 8004562:	d050      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x19e>
 8004564:	2b60      	cmp	r3, #96	@ 0x60
 8004566:	d877      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004568:	2b50      	cmp	r3, #80	@ 0x50
 800456a:	d03c      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x17e>
 800456c:	2b50      	cmp	r3, #80	@ 0x50
 800456e:	d873      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d058      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x1be>
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d86f      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004578:	2b30      	cmp	r3, #48	@ 0x30
 800457a:	d064      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 800457c:	2b30      	cmp	r3, #48	@ 0x30
 800457e:	d86b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004580:	2b20      	cmp	r3, #32
 8004582:	d060      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d867      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d05c      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 800458c:	2b10      	cmp	r3, #16
 800458e:	d05a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x1de>
 8004590:	e062      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	f000 fcd1 	bl	8004f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	609a      	str	r2, [r3, #8]
      break;
 80045be:	e04f      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	f000 fcba 	bl	8004f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045e2:	609a      	str	r2, [r3, #8]
      break;
 80045e4:	e03c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fc2c 	bl	8004e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	@ 0x50
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fc85 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004604:	e02c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fc4b 	bl	8004eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2160      	movs	r1, #96	@ 0x60
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fc75 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004624:	e01c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fc0c 	bl	8004e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2140      	movs	r1, #64	@ 0x40
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc65 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004644:	e00c      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f000 fc5c 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004656:	e003      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e000      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800465e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	00100070 	.word	0x00100070
 8004680:	00100060 	.word	0x00100060
 8004684:	00100050 	.word	0x00100050
 8004688:	00100040 	.word	0x00100040
 800468c:	00100030 	.word	0x00100030
 8004690:	00100020 	.word	0x00100020

08004694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a4c      	ldr	r2, [pc, #304]	@ (80047d8 <TIM_Base_SetConfig+0x144>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d017      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b2:	d013      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a49      	ldr	r2, [pc, #292]	@ (80047dc <TIM_Base_SetConfig+0x148>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a48      	ldr	r2, [pc, #288]	@ (80047e0 <TIM_Base_SetConfig+0x14c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a47      	ldr	r2, [pc, #284]	@ (80047e4 <TIM_Base_SetConfig+0x150>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a46      	ldr	r2, [pc, #280]	@ (80047e8 <TIM_Base_SetConfig+0x154>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x48>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a45      	ldr	r2, [pc, #276]	@ (80047ec <TIM_Base_SetConfig+0x158>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a39      	ldr	r2, [pc, #228]	@ (80047d8 <TIM_Base_SetConfig+0x144>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d023      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d01f      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <TIM_Base_SetConfig+0x148>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01b      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <TIM_Base_SetConfig+0x14c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d017      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a34      	ldr	r2, [pc, #208]	@ (80047e4 <TIM_Base_SetConfig+0x150>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <TIM_Base_SetConfig+0x154>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a33      	ldr	r2, [pc, #204]	@ (80047f0 <TIM_Base_SetConfig+0x15c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a32      	ldr	r2, [pc, #200]	@ (80047f4 <TIM_Base_SetConfig+0x160>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a31      	ldr	r2, [pc, #196]	@ (80047f8 <TIM_Base_SetConfig+0x164>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0xaa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2c      	ldr	r2, [pc, #176]	@ (80047ec <TIM_Base_SetConfig+0x158>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <TIM_Base_SetConfig+0x144>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <TIM_Base_SetConfig+0x110>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1a      	ldr	r2, [pc, #104]	@ (80047e8 <TIM_Base_SetConfig+0x154>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00f      	beq.n	80047a4 <TIM_Base_SetConfig+0x110>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <TIM_Base_SetConfig+0x15c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x110>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <TIM_Base_SetConfig+0x160>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x110>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <TIM_Base_SetConfig+0x164>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x110>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <TIM_Base_SetConfig+0x158>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40015000 	.word	0x40015000
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 0201 	bic.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <TIM_OC1_SetConfig+0x11c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <TIM_OC1_SetConfig+0x88>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a2f      	ldr	r2, [pc, #188]	@ (800491c <TIM_OC1_SetConfig+0x120>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00f      	beq.n	8004884 <TIM_OC1_SetConfig+0x88>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a2e      	ldr	r2, [pc, #184]	@ (8004920 <TIM_OC1_SetConfig+0x124>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_OC1_SetConfig+0x88>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a2d      	ldr	r2, [pc, #180]	@ (8004924 <TIM_OC1_SetConfig+0x128>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_OC1_SetConfig+0x88>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a2c      	ldr	r2, [pc, #176]	@ (8004928 <TIM_OC1_SetConfig+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_OC1_SetConfig+0x88>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a2b      	ldr	r2, [pc, #172]	@ (800492c <TIM_OC1_SetConfig+0x130>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10c      	bne.n	800489e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0308 	bic.w	r3, r3, #8
 800488a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <TIM_OC1_SetConfig+0x11c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_OC1_SetConfig+0xd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	@ (800491c <TIM_OC1_SetConfig+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_OC1_SetConfig+0xd2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004920 <TIM_OC1_SetConfig+0x124>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_OC1_SetConfig+0xd2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004924 <TIM_OC1_SetConfig+0x128>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_OC1_SetConfig+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <TIM_OC1_SetConfig+0x12c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_OC1_SetConfig+0xd2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <TIM_OC1_SetConfig+0x130>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40015000 	.word	0x40015000

08004930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 0210 	bic.w	r2, r3, #16
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0320 	bic.w	r3, r3, #32
 800497e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <TIM_OC2_SetConfig+0x110>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC2_SetConfig+0x74>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <TIM_OC2_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC2_SetConfig+0x74>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a48 <TIM_OC2_SetConfig+0x118>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10d      	bne.n	80049c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <TIM_OC2_SetConfig+0x110>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <TIM_OC2_SetConfig+0xc0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <TIM_OC2_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_OC2_SetConfig+0xc0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <TIM_OC2_SetConfig+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_OC2_SetConfig+0xc0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <TIM_OC2_SetConfig+0x120>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_OC2_SetConfig+0xc0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <TIM_OC2_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC2_SetConfig+0xc0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a17      	ldr	r2, [pc, #92]	@ (8004a48 <TIM_OC2_SetConfig+0x118>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d113      	bne.n	8004a18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40015000 	.word	0x40015000
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b64 <TIM_OC3_SetConfig+0x10c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_OC3_SetConfig+0x72>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <TIM_OC3_SetConfig+0x110>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_OC3_SetConfig+0x72>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	@ (8004b6c <TIM_OC3_SetConfig+0x114>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10d      	bne.n	8004ae6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b64 <TIM_OC3_SetConfig+0x10c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <TIM_OC3_SetConfig+0xbe>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <TIM_OC3_SetConfig+0x110>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00f      	beq.n	8004b16 <TIM_OC3_SetConfig+0xbe>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <TIM_OC3_SetConfig+0x118>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <TIM_OC3_SetConfig+0xbe>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	@ (8004b74 <TIM_OC3_SetConfig+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <TIM_OC3_SetConfig+0xbe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	@ (8004b78 <TIM_OC3_SetConfig+0x120>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC3_SetConfig+0xbe>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <TIM_OC3_SetConfig+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d113      	bne.n	8004b3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40013400 	.word	0x40013400
 8004b6c:	40015000 	.word	0x40015000
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800

08004b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	@ (8004c8c <TIM_OC4_SetConfig+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_OC4_SetConfig+0x74>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c90 <TIM_OC4_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC4_SetConfig+0x74>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a2a      	ldr	r2, [pc, #168]	@ (8004c94 <TIM_OC4_SetConfig+0x118>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10d      	bne.n	8004c0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	031b      	lsls	r3, r3, #12
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c8c <TIM_OC4_SetConfig+0x110>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_OC4_SetConfig+0xc0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <TIM_OC4_SetConfig+0x114>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00f      	beq.n	8004c3c <TIM_OC4_SetConfig+0xc0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c98 <TIM_OC4_SetConfig+0x11c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_OC4_SetConfig+0xc0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <TIM_OC4_SetConfig+0x120>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_OC4_SetConfig+0xc0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <TIM_OC4_SetConfig+0x124>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC4_SetConfig+0xc0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <TIM_OC4_SetConfig+0x118>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d113      	bne.n	8004c64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	019b      	lsls	r3, r3, #6
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40015000 	.word	0x40015000
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	@ (8004d60 <TIM_OC5_SetConfig+0xbc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <TIM_OC5_SetConfig+0x82>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <TIM_OC5_SetConfig+0xc0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00f      	beq.n	8004d26 <TIM_OC5_SetConfig+0x82>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a17      	ldr	r2, [pc, #92]	@ (8004d68 <TIM_OC5_SetConfig+0xc4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_OC5_SetConfig+0x82>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a16      	ldr	r2, [pc, #88]	@ (8004d6c <TIM_OC5_SetConfig+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_OC5_SetConfig+0x82>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <TIM_OC5_SetConfig+0xcc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC5_SetConfig+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a14      	ldr	r2, [pc, #80]	@ (8004d74 <TIM_OC5_SetConfig+0xd0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d109      	bne.n	8004d3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800
 8004d74:	40015000 	.word	0x40015000

08004d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	051b      	lsls	r3, r3, #20
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <TIM_OC6_SetConfig+0xc0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_OC6_SetConfig+0x84>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a19      	ldr	r2, [pc, #100]	@ (8004e3c <TIM_OC6_SetConfig+0xc4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_OC6_SetConfig+0x84>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <TIM_OC6_SetConfig+0xc8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_OC6_SetConfig+0x84>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <TIM_OC6_SetConfig+0xcc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_OC6_SetConfig+0x84>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <TIM_OC6_SetConfig+0xd0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC6_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <TIM_OC6_SetConfig+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d109      	bne.n	8004e10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	40015000 	.word	0x40015000

08004e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f023 030a 	bic.w	r3, r3, #10
 8004e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b087      	sub	sp, #28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 0210 	bic.w	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	031b      	lsls	r3, r3, #12
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f043 0307 	orr.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	401a      	ands	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e074      	b.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a34      	ldr	r2, [pc, #208]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a33      	ldr	r2, [pc, #204]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a31      	ldr	r2, [pc, #196]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005030:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506c:	d01d      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1f      	ldr	r2, [pc, #124]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a11      	ldr	r2, [pc, #68]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10c      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40013400 	.word	0x40013400
 80050ec:	40015000 	.word	0x40015000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <memset>:
 8005100:	4402      	add	r2, r0
 8005102:	4603      	mov	r3, r0
 8005104:	4293      	cmp	r3, r2
 8005106:	d100      	bne.n	800510a <memset+0xa>
 8005108:	4770      	bx	lr
 800510a:	f803 1b01 	strb.w	r1, [r3], #1
 800510e:	e7f9      	b.n	8005104 <memset+0x4>

08005110 <__errno>:
 8005110:	4b01      	ldr	r3, [pc, #4]	@ (8005118 <__errno+0x8>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000034 	.word	0x20000034

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4d0d      	ldr	r5, [pc, #52]	@ (8005154 <__libc_init_array+0x38>)
 8005120:	4c0d      	ldr	r4, [pc, #52]	@ (8005158 <__libc_init_array+0x3c>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	2600      	movs	r6, #0
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	4d0b      	ldr	r5, [pc, #44]	@ (800515c <__libc_init_array+0x40>)
 800512e:	4c0c      	ldr	r4, [pc, #48]	@ (8005160 <__libc_init_array+0x44>)
 8005130:	f001 f9d6 	bl	80064e0 <_init>
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	2600      	movs	r6, #0
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	080068f4 	.word	0x080068f4
 8005158:	080068f4 	.word	0x080068f4
 800515c:	080068f4 	.word	0x080068f4
 8005160:	080068f8 	.word	0x080068f8

08005164 <asinf>:
 8005164:	b508      	push	{r3, lr}
 8005166:	ed2d 8b02 	vpush	{d8}
 800516a:	eeb0 8a40 	vmov.f32	s16, s0
 800516e:	f000 f99d 	bl	80054ac <__ieee754_asinf>
 8005172:	eeb4 8a48 	vcmp.f32	s16, s16
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	eef0 8a40 	vmov.f32	s17, s0
 800517e:	d615      	bvs.n	80051ac <asinf+0x48>
 8005180:	eeb0 0a48 	vmov.f32	s0, s16
 8005184:	f000 f890 	bl	80052a8 <fabsf>
 8005188:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800518c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	dd0a      	ble.n	80051ac <asinf+0x48>
 8005196:	f7ff ffbb 	bl	8005110 <__errno>
 800519a:	ecbd 8b02 	vpop	{d8}
 800519e:	2321      	movs	r3, #33	@ 0x21
 80051a0:	6003      	str	r3, [r0, #0]
 80051a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051a6:	4804      	ldr	r0, [pc, #16]	@ (80051b8 <asinf+0x54>)
 80051a8:	f000 b8d6 	b.w	8005358 <nanf>
 80051ac:	eeb0 0a68 	vmov.f32	s0, s17
 80051b0:	ecbd 8b02 	vpop	{d8}
 80051b4:	bd08      	pop	{r3, pc}
 80051b6:	bf00      	nop
 80051b8:	08006508 	.word	0x08006508

080051bc <powf>:
 80051bc:	b508      	push	{r3, lr}
 80051be:	ed2d 8b04 	vpush	{d8-d9}
 80051c2:	eeb0 8a60 	vmov.f32	s16, s1
 80051c6:	eeb0 9a40 	vmov.f32	s18, s0
 80051ca:	f000 fa53 	bl	8005674 <__ieee754_powf>
 80051ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	eef0 8a40 	vmov.f32	s17, s0
 80051da:	d63e      	bvs.n	800525a <powf+0x9e>
 80051dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80051e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e4:	d112      	bne.n	800520c <powf+0x50>
 80051e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d039      	beq.n	8005264 <powf+0xa8>
 80051f0:	eeb0 0a48 	vmov.f32	s0, s16
 80051f4:	f000 f8a6 	bl	8005344 <finitef>
 80051f8:	b378      	cbz	r0, 800525a <powf+0x9e>
 80051fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d52a      	bpl.n	800525a <powf+0x9e>
 8005204:	f7ff ff84 	bl	8005110 <__errno>
 8005208:	2322      	movs	r3, #34	@ 0x22
 800520a:	e014      	b.n	8005236 <powf+0x7a>
 800520c:	f000 f89a 	bl	8005344 <finitef>
 8005210:	b998      	cbnz	r0, 800523a <powf+0x7e>
 8005212:	eeb0 0a49 	vmov.f32	s0, s18
 8005216:	f000 f895 	bl	8005344 <finitef>
 800521a:	b170      	cbz	r0, 800523a <powf+0x7e>
 800521c:	eeb0 0a48 	vmov.f32	s0, s16
 8005220:	f000 f890 	bl	8005344 <finitef>
 8005224:	b148      	cbz	r0, 800523a <powf+0x7e>
 8005226:	eef4 8a68 	vcmp.f32	s17, s17
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d7e9      	bvc.n	8005204 <powf+0x48>
 8005230:	f7ff ff6e 	bl	8005110 <__errno>
 8005234:	2321      	movs	r3, #33	@ 0x21
 8005236:	6003      	str	r3, [r0, #0]
 8005238:	e00f      	b.n	800525a <powf+0x9e>
 800523a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	d10a      	bne.n	800525a <powf+0x9e>
 8005244:	eeb0 0a49 	vmov.f32	s0, s18
 8005248:	f000 f87c 	bl	8005344 <finitef>
 800524c:	b128      	cbz	r0, 800525a <powf+0x9e>
 800524e:	eeb0 0a48 	vmov.f32	s0, s16
 8005252:	f000 f877 	bl	8005344 <finitef>
 8005256:	2800      	cmp	r0, #0
 8005258:	d1d4      	bne.n	8005204 <powf+0x48>
 800525a:	eeb0 0a68 	vmov.f32	s0, s17
 800525e:	ecbd 8b04 	vpop	{d8-d9}
 8005262:	bd08      	pop	{r3, pc}
 8005264:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005268:	e7f7      	b.n	800525a <powf+0x9e>
	...

0800526c <sqrtf>:
 800526c:	b508      	push	{r3, lr}
 800526e:	ed2d 8b02 	vpush	{d8}
 8005272:	eeb0 8a40 	vmov.f32	s16, s0
 8005276:	f000 f875 	bl	8005364 <__ieee754_sqrtf>
 800527a:	eeb4 8a48 	vcmp.f32	s16, s16
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	d60c      	bvs.n	800529e <sqrtf+0x32>
 8005284:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80052a4 <sqrtf+0x38>
 8005288:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005290:	d505      	bpl.n	800529e <sqrtf+0x32>
 8005292:	f7ff ff3d 	bl	8005110 <__errno>
 8005296:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800529a:	2321      	movs	r3, #33	@ 0x21
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	ecbd 8b02 	vpop	{d8}
 80052a2:	bd08      	pop	{r3, pc}
 80052a4:	00000000 	.word	0x00000000

080052a8 <fabsf>:
 80052a8:	ee10 3a10 	vmov	r3, s0
 80052ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b0:	ee00 3a10 	vmov	s0, r3
 80052b4:	4770      	bx	lr
	...

080052b8 <sinf>:
 80052b8:	ee10 3a10 	vmov	r3, s0
 80052bc:	b507      	push	{r0, r1, r2, lr}
 80052be:	4a1f      	ldr	r2, [pc, #124]	@ (800533c <sinf+0x84>)
 80052c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d807      	bhi.n	80052d8 <sinf+0x20>
 80052c8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005340 <sinf+0x88>
 80052cc:	2000      	movs	r0, #0
 80052ce:	b003      	add	sp, #12
 80052d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d4:	f000 b8a2 	b.w	800541c <__kernel_sinf>
 80052d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80052dc:	d304      	bcc.n	80052e8 <sinf+0x30>
 80052de:	ee30 0a40 	vsub.f32	s0, s0, s0
 80052e2:	b003      	add	sp, #12
 80052e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052e8:	4668      	mov	r0, sp
 80052ea:	f000 fc91 	bl	8005c10 <__ieee754_rem_pio2f>
 80052ee:	f000 0003 	and.w	r0, r0, #3
 80052f2:	2801      	cmp	r0, #1
 80052f4:	d00a      	beq.n	800530c <sinf+0x54>
 80052f6:	2802      	cmp	r0, #2
 80052f8:	d00f      	beq.n	800531a <sinf+0x62>
 80052fa:	b9c0      	cbnz	r0, 800532e <sinf+0x76>
 80052fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8005300:	ed9d 0a00 	vldr	s0, [sp]
 8005304:	2001      	movs	r0, #1
 8005306:	f000 f889 	bl	800541c <__kernel_sinf>
 800530a:	e7ea      	b.n	80052e2 <sinf+0x2a>
 800530c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005310:	ed9d 0a00 	vldr	s0, [sp]
 8005314:	f000 f82a 	bl	800536c <__kernel_cosf>
 8005318:	e7e3      	b.n	80052e2 <sinf+0x2a>
 800531a:	eddd 0a01 	vldr	s1, [sp, #4]
 800531e:	ed9d 0a00 	vldr	s0, [sp]
 8005322:	2001      	movs	r0, #1
 8005324:	f000 f87a 	bl	800541c <__kernel_sinf>
 8005328:	eeb1 0a40 	vneg.f32	s0, s0
 800532c:	e7d9      	b.n	80052e2 <sinf+0x2a>
 800532e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005332:	ed9d 0a00 	vldr	s0, [sp]
 8005336:	f000 f819 	bl	800536c <__kernel_cosf>
 800533a:	e7f5      	b.n	8005328 <sinf+0x70>
 800533c:	3f490fd8 	.word	0x3f490fd8
 8005340:	00000000 	.word	0x00000000

08005344 <finitef>:
 8005344:	ee10 3a10 	vmov	r3, s0
 8005348:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800534c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005350:	bfac      	ite	ge
 8005352:	2000      	movge	r0, #0
 8005354:	2001      	movlt	r0, #1
 8005356:	4770      	bx	lr

08005358 <nanf>:
 8005358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005360 <nanf+0x8>
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	7fc00000 	.word	0x7fc00000

08005364 <__ieee754_sqrtf>:
 8005364:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005368:	4770      	bx	lr
	...

0800536c <__kernel_cosf>:
 800536c:	ee10 3a10 	vmov	r3, s0
 8005370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005374:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005378:	eef0 6a40 	vmov.f32	s13, s0
 800537c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005380:	d204      	bcs.n	800538c <__kernel_cosf+0x20>
 8005382:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005386:	ee17 2a90 	vmov	r2, s15
 800538a:	b342      	cbz	r2, 80053de <__kernel_cosf+0x72>
 800538c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005390:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80053fc <__kernel_cosf+0x90>
 8005394:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005400 <__kernel_cosf+0x94>
 8005398:	4a1a      	ldr	r2, [pc, #104]	@ (8005404 <__kernel_cosf+0x98>)
 800539a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800539e:	4293      	cmp	r3, r2
 80053a0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005408 <__kernel_cosf+0x9c>
 80053a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80053a8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800540c <__kernel_cosf+0xa0>
 80053ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80053b0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005410 <__kernel_cosf+0xa4>
 80053b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80053b8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005414 <__kernel_cosf+0xa8>
 80053bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80053c0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80053c4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80053c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053cc:	eee7 0a06 	vfma.f32	s1, s14, s12
 80053d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d4:	d804      	bhi.n	80053e0 <__kernel_cosf+0x74>
 80053d6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80053da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80053de:	4770      	bx	lr
 80053e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <__kernel_cosf+0xac>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bf9a      	itte	ls
 80053e6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80053ea:	ee07 3a10 	vmovls	s14, r3
 80053ee:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80053f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80053f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053fa:	e7ec      	b.n	80053d6 <__kernel_cosf+0x6a>
 80053fc:	ad47d74e 	.word	0xad47d74e
 8005400:	310f74f6 	.word	0x310f74f6
 8005404:	3e999999 	.word	0x3e999999
 8005408:	b493f27c 	.word	0xb493f27c
 800540c:	37d00d01 	.word	0x37d00d01
 8005410:	bab60b61 	.word	0xbab60b61
 8005414:	3d2aaaab 	.word	0x3d2aaaab
 8005418:	3f480000 	.word	0x3f480000

0800541c <__kernel_sinf>:
 800541c:	ee10 3a10 	vmov	r3, s0
 8005420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005424:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005428:	d204      	bcs.n	8005434 <__kernel_sinf+0x18>
 800542a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800542e:	ee17 3a90 	vmov	r3, s15
 8005432:	b35b      	cbz	r3, 800548c <__kernel_sinf+0x70>
 8005434:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005438:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005490 <__kernel_sinf+0x74>
 800543c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005494 <__kernel_sinf+0x78>
 8005440:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005444:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005498 <__kernel_sinf+0x7c>
 8005448:	eee6 7a07 	vfma.f32	s15, s12, s14
 800544c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800549c <__kernel_sinf+0x80>
 8005450:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005454:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80054a0 <__kernel_sinf+0x84>
 8005458:	ee60 6a07 	vmul.f32	s13, s0, s14
 800545c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005460:	b930      	cbnz	r0, 8005470 <__kernel_sinf+0x54>
 8005462:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80054a4 <__kernel_sinf+0x88>
 8005466:	eea7 6a27 	vfma.f32	s12, s14, s15
 800546a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800546e:	4770      	bx	lr
 8005470:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005474:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005478:	eee0 7a86 	vfma.f32	s15, s1, s12
 800547c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005480:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80054a8 <__kernel_sinf+0x8c>
 8005484:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005488:	ee30 0a60 	vsub.f32	s0, s0, s1
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2f2ec9d3 	.word	0x2f2ec9d3
 8005494:	b2d72f34 	.word	0xb2d72f34
 8005498:	3638ef1b 	.word	0x3638ef1b
 800549c:	b9500d01 	.word	0xb9500d01
 80054a0:	3c088889 	.word	0x3c088889
 80054a4:	be2aaaab 	.word	0xbe2aaaab
 80054a8:	3e2aaaab 	.word	0x3e2aaaab

080054ac <__ieee754_asinf>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	ee10 5a10 	vmov	r5, s0
 80054b2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80054b6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80054ba:	ed2d 8b04 	vpush	{d8-d9}
 80054be:	d10c      	bne.n	80054da <__ieee754_asinf+0x2e>
 80054c0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005634 <__ieee754_asinf+0x188>
 80054c4:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8005638 <__ieee754_asinf+0x18c>
 80054c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80054cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80054d0:	eeb0 0a67 	vmov.f32	s0, s15
 80054d4:	ecbd 8b04 	vpop	{d8-d9}
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	d904      	bls.n	80054e6 <__ieee754_asinf+0x3a>
 80054dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80054e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80054e4:	e7f6      	b.n	80054d4 <__ieee754_asinf+0x28>
 80054e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80054ea:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80054ee:	d20b      	bcs.n	8005508 <__ieee754_asinf+0x5c>
 80054f0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80054f4:	d252      	bcs.n	800559c <__ieee754_asinf+0xf0>
 80054f6:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800563c <__ieee754_asinf+0x190>
 80054fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80054fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	dce5      	bgt.n	80054d4 <__ieee754_asinf+0x28>
 8005508:	f7ff fece 	bl	80052a8 <fabsf>
 800550c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8005510:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005514:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005518:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005640 <__ieee754_asinf+0x194>
 800551c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8005644 <__ieee754_asinf+0x198>
 8005520:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8005648 <__ieee754_asinf+0x19c>
 8005524:	eea8 7a27 	vfma.f32	s14, s16, s15
 8005528:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800564c <__ieee754_asinf+0x1a0>
 800552c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005530:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005650 <__ieee754_asinf+0x1a4>
 8005534:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005538:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8005654 <__ieee754_asinf+0x1a8>
 800553c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005540:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005658 <__ieee754_asinf+0x1ac>
 8005544:	eea7 9a88 	vfma.f32	s18, s15, s16
 8005548:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800565c <__ieee754_asinf+0x1b0>
 800554c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8005550:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8005660 <__ieee754_asinf+0x1b4>
 8005554:	eea7 7a88 	vfma.f32	s14, s15, s16
 8005558:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8005664 <__ieee754_asinf+0x1b8>
 800555c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8005560:	eeb0 0a48 	vmov.f32	s0, s16
 8005564:	eee7 8a88 	vfma.f32	s17, s15, s16
 8005568:	f7ff fefc 	bl	8005364 <__ieee754_sqrtf>
 800556c:	4b3e      	ldr	r3, [pc, #248]	@ (8005668 <__ieee754_asinf+0x1bc>)
 800556e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8005572:	429c      	cmp	r4, r3
 8005574:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8005578:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800557c:	d93d      	bls.n	80055fa <__ieee754_asinf+0x14e>
 800557e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8005582:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800566c <__ieee754_asinf+0x1c0>
 8005586:	eee0 7a26 	vfma.f32	s15, s0, s13
 800558a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8005638 <__ieee754_asinf+0x18c>
 800558e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005592:	2d00      	cmp	r5, #0
 8005594:	bfd8      	it	le
 8005596:	eeb1 0a40 	vnegle.f32	s0, s0
 800559a:	e79b      	b.n	80054d4 <__ieee754_asinf+0x28>
 800559c:	ee60 7a00 	vmul.f32	s15, s0, s0
 80055a0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8005644 <__ieee754_asinf+0x198>
 80055a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005640 <__ieee754_asinf+0x194>
 80055a8:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8005658 <__ieee754_asinf+0x1ac>
 80055ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80055b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800564c <__ieee754_asinf+0x1a0>
 80055b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80055b8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8005650 <__ieee754_asinf+0x1a4>
 80055bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055c0:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8005654 <__ieee754_asinf+0x1a8>
 80055c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80055c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005648 <__ieee754_asinf+0x19c>
 80055cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055d0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800565c <__ieee754_asinf+0x1b0>
 80055d4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80055d8:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8005660 <__ieee754_asinf+0x1b4>
 80055dc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80055e0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8005664 <__ieee754_asinf+0x1b8>
 80055e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80055e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055ec:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80055f0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80055f4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80055f8:	e76c      	b.n	80054d4 <__ieee754_asinf+0x28>
 80055fa:	ee10 3a10 	vmov	r3, s0
 80055fe:	f36f 030b 	bfc	r3, #0, #12
 8005602:	ee07 3a10 	vmov	s14, r3
 8005606:	eea7 8a47 	vfms.f32	s16, s14, s14
 800560a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800560e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005612:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005634 <__ieee754_asinf+0x188>
 8005616:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800561a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8005670 <__ieee754_asinf+0x1c4>
 800561e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8005622:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8005626:	eeb0 6a40 	vmov.f32	s12, s0
 800562a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800562e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005632:	e7ac      	b.n	800558e <__ieee754_asinf+0xe2>
 8005634:	b33bbd2e 	.word	0xb33bbd2e
 8005638:	3fc90fdb 	.word	0x3fc90fdb
 800563c:	7149f2ca 	.word	0x7149f2ca
 8005640:	3a4f7f04 	.word	0x3a4f7f04
 8005644:	3811ef08 	.word	0x3811ef08
 8005648:	3e2aaaab 	.word	0x3e2aaaab
 800564c:	bd241146 	.word	0xbd241146
 8005650:	3e4e0aa8 	.word	0x3e4e0aa8
 8005654:	bea6b090 	.word	0xbea6b090
 8005658:	3d9dc62e 	.word	0x3d9dc62e
 800565c:	bf303361 	.word	0xbf303361
 8005660:	4001572d 	.word	0x4001572d
 8005664:	c019d139 	.word	0xc019d139
 8005668:	3f799999 	.word	0x3f799999
 800566c:	333bbd2e 	.word	0x333bbd2e
 8005670:	3f490fdb 	.word	0x3f490fdb

08005674 <__ieee754_powf>:
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	ee10 4a90 	vmov	r4, s1
 800567c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005680:	ed2d 8b02 	vpush	{d8}
 8005684:	ee10 6a10 	vmov	r6, s0
 8005688:	eeb0 8a40 	vmov.f32	s16, s0
 800568c:	eef0 8a60 	vmov.f32	s17, s1
 8005690:	d10c      	bne.n	80056ac <__ieee754_powf+0x38>
 8005692:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8005696:	0076      	lsls	r6, r6, #1
 8005698:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800569c:	f240 8274 	bls.w	8005b88 <__ieee754_powf+0x514>
 80056a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80056a4:	ecbd 8b02 	vpop	{d8}
 80056a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ac:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80056b0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80056b4:	d802      	bhi.n	80056bc <__ieee754_powf+0x48>
 80056b6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80056ba:	d908      	bls.n	80056ce <__ieee754_powf+0x5a>
 80056bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80056c0:	d1ee      	bne.n	80056a0 <__ieee754_powf+0x2c>
 80056c2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80056c6:	0064      	lsls	r4, r4, #1
 80056c8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80056cc:	e7e6      	b.n	800569c <__ieee754_powf+0x28>
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	da1f      	bge.n	8005712 <__ieee754_powf+0x9e>
 80056d2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80056d6:	f080 8260 	bcs.w	8005b9a <__ieee754_powf+0x526>
 80056da:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80056de:	d32f      	bcc.n	8005740 <__ieee754_powf+0xcc>
 80056e0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80056e4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80056e8:	fa49 f503 	asr.w	r5, r9, r3
 80056ec:	fa05 f303 	lsl.w	r3, r5, r3
 80056f0:	454b      	cmp	r3, r9
 80056f2:	d123      	bne.n	800573c <__ieee754_powf+0xc8>
 80056f4:	f005 0501 	and.w	r5, r5, #1
 80056f8:	f1c5 0502 	rsb	r5, r5, #2
 80056fc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005700:	d11f      	bne.n	8005742 <__ieee754_powf+0xce>
 8005702:	2c00      	cmp	r4, #0
 8005704:	f280 8246 	bge.w	8005b94 <__ieee754_powf+0x520>
 8005708:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800570c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005710:	e7c8      	b.n	80056a4 <__ieee754_powf+0x30>
 8005712:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005716:	d111      	bne.n	800573c <__ieee754_powf+0xc8>
 8005718:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800571c:	f000 8234 	beq.w	8005b88 <__ieee754_powf+0x514>
 8005720:	d906      	bls.n	8005730 <__ieee754_powf+0xbc>
 8005722:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8005a38 <__ieee754_powf+0x3c4>
 8005726:	2c00      	cmp	r4, #0
 8005728:	bfa8      	it	ge
 800572a:	eeb0 0a68 	vmovge.f32	s0, s17
 800572e:	e7b9      	b.n	80056a4 <__ieee754_powf+0x30>
 8005730:	2c00      	cmp	r4, #0
 8005732:	f280 822c 	bge.w	8005b8e <__ieee754_powf+0x51a>
 8005736:	eeb1 0a68 	vneg.f32	s0, s17
 800573a:	e7b3      	b.n	80056a4 <__ieee754_powf+0x30>
 800573c:	2500      	movs	r5, #0
 800573e:	e7dd      	b.n	80056fc <__ieee754_powf+0x88>
 8005740:	2500      	movs	r5, #0
 8005742:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005746:	d102      	bne.n	800574e <__ieee754_powf+0xda>
 8005748:	ee28 0a08 	vmul.f32	s0, s16, s16
 800574c:	e7aa      	b.n	80056a4 <__ieee754_powf+0x30>
 800574e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005752:	f040 8227 	bne.w	8005ba4 <__ieee754_powf+0x530>
 8005756:	2e00      	cmp	r6, #0
 8005758:	f2c0 8224 	blt.w	8005ba4 <__ieee754_powf+0x530>
 800575c:	eeb0 0a48 	vmov.f32	s0, s16
 8005760:	ecbd 8b02 	vpop	{d8}
 8005764:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	f7ff bdfc 	b.w	8005364 <__ieee754_sqrtf>
 800576c:	2d01      	cmp	r5, #1
 800576e:	d199      	bne.n	80056a4 <__ieee754_powf+0x30>
 8005770:	eeb1 0a40 	vneg.f32	s0, s0
 8005774:	e796      	b.n	80056a4 <__ieee754_powf+0x30>
 8005776:	0ff0      	lsrs	r0, r6, #31
 8005778:	3801      	subs	r0, #1
 800577a:	ea55 0300 	orrs.w	r3, r5, r0
 800577e:	d104      	bne.n	800578a <__ieee754_powf+0x116>
 8005780:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005784:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005788:	e78c      	b.n	80056a4 <__ieee754_powf+0x30>
 800578a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800578e:	d96d      	bls.n	800586c <__ieee754_powf+0x1f8>
 8005790:	4baa      	ldr	r3, [pc, #680]	@ (8005a3c <__ieee754_powf+0x3c8>)
 8005792:	4598      	cmp	r8, r3
 8005794:	d808      	bhi.n	80057a8 <__ieee754_powf+0x134>
 8005796:	2c00      	cmp	r4, #0
 8005798:	da0b      	bge.n	80057b2 <__ieee754_powf+0x13e>
 800579a:	2000      	movs	r0, #0
 800579c:	ecbd 8b02 	vpop	{d8}
 80057a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	f000 bbea 	b.w	8005f7c <__math_oflowf>
 80057a8:	4ba5      	ldr	r3, [pc, #660]	@ (8005a40 <__ieee754_powf+0x3cc>)
 80057aa:	4598      	cmp	r8, r3
 80057ac:	d908      	bls.n	80057c0 <__ieee754_powf+0x14c>
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	dcf3      	bgt.n	800579a <__ieee754_powf+0x126>
 80057b2:	2000      	movs	r0, #0
 80057b4:	ecbd 8b02 	vpop	{d8}
 80057b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	f000 bbd8 	b.w	8005f70 <__math_uflowf>
 80057c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80057c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80057c8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8005a44 <__ieee754_powf+0x3d0>
 80057cc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80057d0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80057d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80057d8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80057dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80057e0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8005a48 <__ieee754_powf+0x3d4>
 80057e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057e8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8005a4c <__ieee754_powf+0x3d8>
 80057ec:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80057f0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005a50 <__ieee754_powf+0x3dc>
 80057f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80057f8:	eeb0 7a67 	vmov.f32	s14, s15
 80057fc:	eea0 7a26 	vfma.f32	s14, s0, s13
 8005800:	ee17 3a10 	vmov	r3, s14
 8005804:	f36f 030b 	bfc	r3, #0, #12
 8005808:	ee07 3a10 	vmov	s14, r3
 800580c:	eeb0 6a47 	vmov.f32	s12, s14
 8005810:	eea0 6a66 	vfms.f32	s12, s0, s13
 8005814:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005818:	3d01      	subs	r5, #1
 800581a:	4305      	orrs	r5, r0
 800581c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005820:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005824:	f36f 040b 	bfc	r4, #0, #12
 8005828:	bf18      	it	ne
 800582a:	eeb0 8a66 	vmovne.f32	s16, s13
 800582e:	ee06 4a90 	vmov	s13, r4
 8005832:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005836:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800583a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800583e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8005842:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005846:	ee17 1a10 	vmov	r1, s14
 800584a:	2900      	cmp	r1, #0
 800584c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005850:	f340 80dd 	ble.w	8005a0e <__ieee754_powf+0x39a>
 8005854:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8005858:	f240 80ca 	bls.w	80059f0 <__ieee754_powf+0x37c>
 800585c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005864:	bf4c      	ite	mi
 8005866:	2001      	movmi	r0, #1
 8005868:	2000      	movpl	r0, #0
 800586a:	e797      	b.n	800579c <__ieee754_powf+0x128>
 800586c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005870:	bf01      	itttt	eq
 8005872:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8005a54 <__ieee754_powf+0x3e0>
 8005876:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800587a:	f06f 0317 	mvneq.w	r3, #23
 800587e:	ee17 7a90 	vmoveq	r7, s15
 8005882:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8005886:	bf18      	it	ne
 8005888:	2300      	movne	r3, #0
 800588a:	3a7f      	subs	r2, #127	@ 0x7f
 800588c:	441a      	add	r2, r3
 800588e:	4b72      	ldr	r3, [pc, #456]	@ (8005a58 <__ieee754_powf+0x3e4>)
 8005890:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005894:	429f      	cmp	r7, r3
 8005896:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800589a:	dd06      	ble.n	80058aa <__ieee754_powf+0x236>
 800589c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <__ieee754_powf+0x3e8>)
 800589e:	429f      	cmp	r7, r3
 80058a0:	f340 80a4 	ble.w	80059ec <__ieee754_powf+0x378>
 80058a4:	3201      	adds	r2, #1
 80058a6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80058aa:	2600      	movs	r6, #0
 80058ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005a60 <__ieee754_powf+0x3ec>)
 80058ae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80058b2:	ee07 1a10 	vmov	s14, r1
 80058b6:	edd3 5a00 	vldr	s11, [r3]
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <__ieee754_powf+0x3f0>)
 80058bc:	ee75 7a87 	vadd.f32	s15, s11, s14
 80058c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058c4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80058c8:	1049      	asrs	r1, r1, #1
 80058ca:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80058ce:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80058d2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80058d6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80058da:	ee07 1a90 	vmov	s15, r1
 80058de:	ee26 5a24 	vmul.f32	s10, s12, s9
 80058e2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80058e6:	ee15 7a10 	vmov	r7, s10
 80058ea:	401f      	ands	r7, r3
 80058ec:	ee06 7a90 	vmov	s13, r7
 80058f0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80058f4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80058f8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80058fc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005900:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005a68 <__ieee754_powf+0x3f4>
 8005904:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005a6c <__ieee754_powf+0x3f8>
 8005908:	eee7 5a87 	vfma.f32	s11, s15, s14
 800590c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005a70 <__ieee754_powf+0x3fc>
 8005910:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005914:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8005a44 <__ieee754_powf+0x3d0>
 8005918:	eee7 5a27 	vfma.f32	s11, s14, s15
 800591c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005a74 <__ieee754_powf+0x400>
 8005920:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005924:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005a78 <__ieee754_powf+0x404>
 8005928:	ee26 6a24 	vmul.f32	s12, s12, s9
 800592c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005930:	ee35 7a26 	vadd.f32	s14, s10, s13
 8005934:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8005938:	ee27 7a06 	vmul.f32	s14, s14, s12
 800593c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005940:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8005944:	eef0 5a67 	vmov.f32	s11, s15
 8005948:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800594c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005950:	ee15 1a90 	vmov	r1, s11
 8005954:	4019      	ands	r1, r3
 8005956:	ee05 1a90 	vmov	s11, r1
 800595a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800595e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8005962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005966:	ee67 7a85 	vmul.f32	s15, s15, s10
 800596a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800596e:	eeb0 6a67 	vmov.f32	s12, s15
 8005972:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8005976:	ee16 1a10 	vmov	r1, s12
 800597a:	4019      	ands	r1, r3
 800597c:	ee06 1a10 	vmov	s12, r1
 8005980:	eeb0 7a46 	vmov.f32	s14, s12
 8005984:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005988:	493c      	ldr	r1, [pc, #240]	@ (8005a7c <__ieee754_powf+0x408>)
 800598a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800598e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005992:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005a80 <__ieee754_powf+0x40c>
 8005996:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8005a84 <__ieee754_powf+0x410>
 800599a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800599e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005a88 <__ieee754_powf+0x414>
 80059a2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80059a6:	ed91 7a00 	vldr	s14, [r1]
 80059aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059ae:	ee07 2a10 	vmov	s14, r2
 80059b2:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <__ieee754_powf+0x418>)
 80059b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059b8:	eeb0 7a67 	vmov.f32	s14, s15
 80059bc:	eea6 7a25 	vfma.f32	s14, s12, s11
 80059c0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80059c4:	ed92 5a00 	vldr	s10, [r2]
 80059c8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80059cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80059d0:	ee17 2a10 	vmov	r2, s14
 80059d4:	401a      	ands	r2, r3
 80059d6:	ee07 2a10 	vmov	s14, r2
 80059da:	ee77 6a66 	vsub.f32	s13, s14, s13
 80059de:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80059e2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80059e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059ea:	e715      	b.n	8005818 <__ieee754_powf+0x1a4>
 80059ec:	2601      	movs	r6, #1
 80059ee:	e75d      	b.n	80058ac <__ieee754_powf+0x238>
 80059f0:	d152      	bne.n	8005a98 <__ieee754_powf+0x424>
 80059f2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005a90 <__ieee754_powf+0x41c>
 80059f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059fa:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80059fe:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a06:	f73f af29 	bgt.w	800585c <__ieee754_powf+0x1e8>
 8005a0a:	2386      	movs	r3, #134	@ 0x86
 8005a0c:	e048      	b.n	8005aa0 <__ieee754_powf+0x42c>
 8005a0e:	4a21      	ldr	r2, [pc, #132]	@ (8005a94 <__ieee754_powf+0x420>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d907      	bls.n	8005a24 <__ieee754_powf+0x3b0>
 8005a14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1c:	bf4c      	ite	mi
 8005a1e:	2001      	movmi	r0, #1
 8005a20:	2000      	movpl	r0, #0
 8005a22:	e6c7      	b.n	80057b4 <__ieee754_powf+0x140>
 8005a24:	d138      	bne.n	8005a98 <__ieee754_powf+0x424>
 8005a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a2a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	dbea      	blt.n	8005a0a <__ieee754_powf+0x396>
 8005a34:	e7ee      	b.n	8005a14 <__ieee754_powf+0x3a0>
 8005a36:	bf00      	nop
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	3f7ffff3 	.word	0x3f7ffff3
 8005a40:	3f800007 	.word	0x3f800007
 8005a44:	3eaaaaab 	.word	0x3eaaaaab
 8005a48:	3fb8aa00 	.word	0x3fb8aa00
 8005a4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005a50:	36eca570 	.word	0x36eca570
 8005a54:	4b800000 	.word	0x4b800000
 8005a58:	001cc471 	.word	0x001cc471
 8005a5c:	005db3d6 	.word	0x005db3d6
 8005a60:	0800651c 	.word	0x0800651c
 8005a64:	fffff000 	.word	0xfffff000
 8005a68:	3e6c3255 	.word	0x3e6c3255
 8005a6c:	3e53f142 	.word	0x3e53f142
 8005a70:	3e8ba305 	.word	0x3e8ba305
 8005a74:	3edb6db7 	.word	0x3edb6db7
 8005a78:	3f19999a 	.word	0x3f19999a
 8005a7c:	0800650c 	.word	0x0800650c
 8005a80:	3f76384f 	.word	0x3f76384f
 8005a84:	3f763800 	.word	0x3f763800
 8005a88:	369dc3a0 	.word	0x369dc3a0
 8005a8c:	08006514 	.word	0x08006514
 8005a90:	3338aa3c 	.word	0x3338aa3c
 8005a94:	43160000 	.word	0x43160000
 8005a98:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005a9c:	d96f      	bls.n	8005b7e <__ieee754_powf+0x50a>
 8005a9e:	15db      	asrs	r3, r3, #23
 8005aa0:	3b7e      	subs	r3, #126	@ 0x7e
 8005aa2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005aa6:	4118      	asrs	r0, r3
 8005aa8:	4408      	add	r0, r1
 8005aaa:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005aae:	4a4e      	ldr	r2, [pc, #312]	@ (8005be8 <__ieee754_powf+0x574>)
 8005ab0:	3b7f      	subs	r3, #127	@ 0x7f
 8005ab2:	411a      	asrs	r2, r3
 8005ab4:	4002      	ands	r2, r0
 8005ab6:	ee07 2a10 	vmov	s14, r2
 8005aba:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8005abe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005ac2:	f1c3 0317 	rsb	r3, r3, #23
 8005ac6:	4118      	asrs	r0, r3
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ace:	bfb8      	it	lt
 8005ad0:	4240      	neglt	r0, r0
 8005ad2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8005ad6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005bec <__ieee754_powf+0x578>
 8005ada:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8005bf0 <__ieee754_powf+0x57c>
 8005ade:	ee16 3a90 	vmov	r3, s13
 8005ae2:	f36f 030b 	bfc	r3, #0, #12
 8005ae6:	ee06 3a90 	vmov	s13, r3
 8005aea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005aee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005af2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005af6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8005bf4 <__ieee754_powf+0x580>
 8005afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005afe:	eee0 7a87 	vfma.f32	s15, s1, s14
 8005b02:	eeb0 7a67 	vmov.f32	s14, s15
 8005b06:	eea6 7a86 	vfma.f32	s14, s13, s12
 8005b0a:	eef0 5a47 	vmov.f32	s11, s14
 8005b0e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8005b12:	ee67 6a07 	vmul.f32	s13, s14, s14
 8005b16:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005b1a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8005bf8 <__ieee754_powf+0x584>
 8005b1e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8005bfc <__ieee754_powf+0x588>
 8005b22:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8005b26:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8005c00 <__ieee754_powf+0x58c>
 8005b2a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8005b2e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8005c04 <__ieee754_powf+0x590>
 8005b32:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8005b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c08 <__ieee754_powf+0x594>
 8005b3a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8005b3e:	eeb0 6a47 	vmov.f32	s12, s14
 8005b42:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8005b46:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005b4a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8005b4e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8005b52:	eee7 7a27 	vfma.f32	s15, s14, s15
 8005b56:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8005b5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005b66:	ee10 3a10 	vmov	r3, s0
 8005b6a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005b6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b72:	da06      	bge.n	8005b82 <__ieee754_powf+0x50e>
 8005b74:	f000 f97c 	bl	8005e70 <scalbnf>
 8005b78:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005b7c:	e592      	b.n	80056a4 <__ieee754_powf+0x30>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7a7      	b.n	8005ad2 <__ieee754_powf+0x45e>
 8005b82:	ee00 3a10 	vmov	s0, r3
 8005b86:	e7f7      	b.n	8005b78 <__ieee754_powf+0x504>
 8005b88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005b8c:	e58a      	b.n	80056a4 <__ieee754_powf+0x30>
 8005b8e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8005c0c <__ieee754_powf+0x598>
 8005b92:	e587      	b.n	80056a4 <__ieee754_powf+0x30>
 8005b94:	eeb0 0a48 	vmov.f32	s0, s16
 8005b98:	e584      	b.n	80056a4 <__ieee754_powf+0x30>
 8005b9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005b9e:	f43f adbb 	beq.w	8005718 <__ieee754_powf+0xa4>
 8005ba2:	2502      	movs	r5, #2
 8005ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ba8:	f7ff fb7e 	bl	80052a8 <fabsf>
 8005bac:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005bb0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005bb4:	4647      	mov	r7, r8
 8005bb6:	d003      	beq.n	8005bc0 <__ieee754_powf+0x54c>
 8005bb8:	f1b8 0f00 	cmp.w	r8, #0
 8005bbc:	f47f addb 	bne.w	8005776 <__ieee754_powf+0x102>
 8005bc0:	2c00      	cmp	r4, #0
 8005bc2:	bfbc      	itt	lt
 8005bc4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8005bc8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	f6bf ad69 	bge.w	80056a4 <__ieee754_powf+0x30>
 8005bd2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005bd6:	ea58 0805 	orrs.w	r8, r8, r5
 8005bda:	f47f adc7 	bne.w	800576c <__ieee754_powf+0xf8>
 8005bde:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005be2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005be6:	e55d      	b.n	80056a4 <__ieee754_powf+0x30>
 8005be8:	ff800000 	.word	0xff800000
 8005bec:	3f317218 	.word	0x3f317218
 8005bf0:	3f317200 	.word	0x3f317200
 8005bf4:	35bfbe8c 	.word	0x35bfbe8c
 8005bf8:	b5ddea0e 	.word	0xb5ddea0e
 8005bfc:	3331bb4c 	.word	0x3331bb4c
 8005c00:	388ab355 	.word	0x388ab355
 8005c04:	bb360b61 	.word	0xbb360b61
 8005c08:	3e2aaaab 	.word	0x3e2aaaab
 8005c0c:	00000000 	.word	0x00000000

08005c10 <__ieee754_rem_pio2f>:
 8005c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c12:	ee10 6a10 	vmov	r6, s0
 8005c16:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <__ieee754_rem_pio2f+0x228>)
 8005c18:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005c1c:	429d      	cmp	r5, r3
 8005c1e:	b087      	sub	sp, #28
 8005c20:	4604      	mov	r4, r0
 8005c22:	d805      	bhi.n	8005c30 <__ieee754_rem_pio2f+0x20>
 8005c24:	2300      	movs	r3, #0
 8005c26:	ed80 0a00 	vstr	s0, [r0]
 8005c2a:	6043      	str	r3, [r0, #4]
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e022      	b.n	8005c76 <__ieee754_rem_pio2f+0x66>
 8005c30:	4b82      	ldr	r3, [pc, #520]	@ (8005e3c <__ieee754_rem_pio2f+0x22c>)
 8005c32:	429d      	cmp	r5, r3
 8005c34:	d83a      	bhi.n	8005cac <__ieee754_rem_pio2f+0x9c>
 8005c36:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005e40 <__ieee754_rem_pio2f+0x230>
 8005c40:	4a80      	ldr	r2, [pc, #512]	@ (8005e44 <__ieee754_rem_pio2f+0x234>)
 8005c42:	f023 030f 	bic.w	r3, r3, #15
 8005c46:	dd18      	ble.n	8005c7a <__ieee754_rem_pio2f+0x6a>
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005c4e:	bf09      	itett	eq
 8005c50:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005e48 <__ieee754_rem_pio2f+0x238>
 8005c54:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005e4c <__ieee754_rem_pio2f+0x23c>
 8005c58:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005e50 <__ieee754_rem_pio2f+0x240>
 8005c5c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005c60:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c68:	ed80 7a00 	vstr	s14, [r0]
 8005c6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c70:	edc0 7a01 	vstr	s15, [r0, #4]
 8005c74:	2001      	movs	r0, #1
 8005c76:	b007      	add	sp, #28
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005c80:	bf09      	itett	eq
 8005c82:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005e48 <__ieee754_rem_pio2f+0x238>
 8005c86:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005e4c <__ieee754_rem_pio2f+0x23c>
 8005c8a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005e50 <__ieee754_rem_pio2f+0x240>
 8005c8e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005c92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c9a:	ed80 7a00 	vstr	s14, [r0]
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	edc0 7a01 	vstr	s15, [r0, #4]
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	e7e4      	b.n	8005c76 <__ieee754_rem_pio2f+0x66>
 8005cac:	4b69      	ldr	r3, [pc, #420]	@ (8005e54 <__ieee754_rem_pio2f+0x244>)
 8005cae:	429d      	cmp	r5, r3
 8005cb0:	d873      	bhi.n	8005d9a <__ieee754_rem_pio2f+0x18a>
 8005cb2:	f7ff faf9 	bl	80052a8 <fabsf>
 8005cb6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005e58 <__ieee754_rem_pio2f+0x248>
 8005cba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005cbe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cca:	ee17 0a90 	vmov	r0, s15
 8005cce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005e40 <__ieee754_rem_pio2f+0x230>
 8005cd2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005cd6:	281f      	cmp	r0, #31
 8005cd8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005e4c <__ieee754_rem_pio2f+0x23c>
 8005cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce0:	eeb1 6a47 	vneg.f32	s12, s14
 8005ce4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005ce8:	ee16 1a90 	vmov	r1, s13
 8005cec:	dc09      	bgt.n	8005d02 <__ieee754_rem_pio2f+0xf2>
 8005cee:	4a5b      	ldr	r2, [pc, #364]	@ (8005e5c <__ieee754_rem_pio2f+0x24c>)
 8005cf0:	1e47      	subs	r7, r0, #1
 8005cf2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005cf6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d107      	bne.n	8005d12 <__ieee754_rem_pio2f+0x102>
 8005d02:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005d06:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005d0a:	2a08      	cmp	r2, #8
 8005d0c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005d10:	dc14      	bgt.n	8005d3c <__ieee754_rem_pio2f+0x12c>
 8005d12:	6021      	str	r1, [r4, #0]
 8005d14:	ed94 7a00 	vldr	s14, [r4]
 8005d18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005d1c:	2e00      	cmp	r6, #0
 8005d1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d22:	ed84 0a01 	vstr	s0, [r4, #4]
 8005d26:	daa6      	bge.n	8005c76 <__ieee754_rem_pio2f+0x66>
 8005d28:	eeb1 7a47 	vneg.f32	s14, s14
 8005d2c:	eeb1 0a40 	vneg.f32	s0, s0
 8005d30:	ed84 7a00 	vstr	s14, [r4]
 8005d34:	ed84 0a01 	vstr	s0, [r4, #4]
 8005d38:	4240      	negs	r0, r0
 8005d3a:	e79c      	b.n	8005c76 <__ieee754_rem_pio2f+0x66>
 8005d3c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005e48 <__ieee754_rem_pio2f+0x238>
 8005d40:	eef0 6a40 	vmov.f32	s13, s0
 8005d44:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005d48:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005d4c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005d50:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e50 <__ieee754_rem_pio2f+0x240>
 8005d54:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005d58:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005d5c:	ee15 2a90 	vmov	r2, s11
 8005d60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005d64:	1a5b      	subs	r3, r3, r1
 8005d66:	2b19      	cmp	r3, #25
 8005d68:	dc04      	bgt.n	8005d74 <__ieee754_rem_pio2f+0x164>
 8005d6a:	edc4 5a00 	vstr	s11, [r4]
 8005d6e:	eeb0 0a66 	vmov.f32	s0, s13
 8005d72:	e7cf      	b.n	8005d14 <__ieee754_rem_pio2f+0x104>
 8005d74:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005e60 <__ieee754_rem_pio2f+0x250>
 8005d78:	eeb0 0a66 	vmov.f32	s0, s13
 8005d7c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005d80:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005d84:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005e64 <__ieee754_rem_pio2f+0x254>
 8005d88:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005d8c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005d90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005d94:	ed84 7a00 	vstr	s14, [r4]
 8005d98:	e7bc      	b.n	8005d14 <__ieee754_rem_pio2f+0x104>
 8005d9a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8005d9e:	d306      	bcc.n	8005dae <__ieee754_rem_pio2f+0x19e>
 8005da0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005da4:	edc0 7a01 	vstr	s15, [r0, #4]
 8005da8:	edc0 7a00 	vstr	s15, [r0]
 8005dac:	e73e      	b.n	8005c2c <__ieee754_rem_pio2f+0x1c>
 8005dae:	15ea      	asrs	r2, r5, #23
 8005db0:	3a86      	subs	r2, #134	@ 0x86
 8005db2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dbe:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005e68 <__ieee754_rem_pio2f+0x258>
 8005dc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dca:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005dce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dde:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005de2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005de6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dee:	edcd 7a05 	vstr	s15, [sp, #20]
 8005df2:	d11e      	bne.n	8005e32 <__ieee754_rem_pio2f+0x222>
 8005df4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2302      	movne	r3, #2
 8005e02:	491a      	ldr	r1, [pc, #104]	@ (8005e6c <__ieee754_rem_pio2f+0x25c>)
 8005e04:	9101      	str	r1, [sp, #4]
 8005e06:	2102      	movs	r1, #2
 8005e08:	9100      	str	r1, [sp, #0]
 8005e0a:	a803      	add	r0, sp, #12
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	f000 f8bb 	bl	8005f88 <__kernel_rem_pio2f>
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	f6bf af2f 	bge.w	8005c76 <__ieee754_rem_pio2f+0x66>
 8005e18:	edd4 7a00 	vldr	s15, [r4]
 8005e1c:	eef1 7a67 	vneg.f32	s15, s15
 8005e20:	edc4 7a00 	vstr	s15, [r4]
 8005e24:	edd4 7a01 	vldr	s15, [r4, #4]
 8005e28:	eef1 7a67 	vneg.f32	s15, s15
 8005e2c:	edc4 7a01 	vstr	s15, [r4, #4]
 8005e30:	e782      	b.n	8005d38 <__ieee754_rem_pio2f+0x128>
 8005e32:	2303      	movs	r3, #3
 8005e34:	e7e5      	b.n	8005e02 <__ieee754_rem_pio2f+0x1f2>
 8005e36:	bf00      	nop
 8005e38:	3f490fd8 	.word	0x3f490fd8
 8005e3c:	4016cbe3 	.word	0x4016cbe3
 8005e40:	3fc90f80 	.word	0x3fc90f80
 8005e44:	3fc90fd0 	.word	0x3fc90fd0
 8005e48:	37354400 	.word	0x37354400
 8005e4c:	37354443 	.word	0x37354443
 8005e50:	2e85a308 	.word	0x2e85a308
 8005e54:	43490f80 	.word	0x43490f80
 8005e58:	3f22f984 	.word	0x3f22f984
 8005e5c:	08006524 	.word	0x08006524
 8005e60:	2e85a300 	.word	0x2e85a300
 8005e64:	248d3132 	.word	0x248d3132
 8005e68:	43800000 	.word	0x43800000
 8005e6c:	080065a4 	.word	0x080065a4

08005e70 <scalbnf>:
 8005e70:	ee10 3a10 	vmov	r3, s0
 8005e74:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005e78:	d02b      	beq.n	8005ed2 <scalbnf+0x62>
 8005e7a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005e7e:	d302      	bcc.n	8005e86 <scalbnf+0x16>
 8005e80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005e84:	4770      	bx	lr
 8005e86:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005e8a:	d123      	bne.n	8005ed4 <scalbnf+0x64>
 8005e8c:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <scalbnf+0xb0>)
 8005e8e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005f24 <scalbnf+0xb4>
 8005e92:	4298      	cmp	r0, r3
 8005e94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e98:	db17      	blt.n	8005eca <scalbnf+0x5a>
 8005e9a:	ee10 3a10 	vmov	r3, s0
 8005e9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005ea2:	3a19      	subs	r2, #25
 8005ea4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005ea8:	4288      	cmp	r0, r1
 8005eaa:	dd15      	ble.n	8005ed8 <scalbnf+0x68>
 8005eac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005f28 <scalbnf+0xb8>
 8005eb0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005f2c <scalbnf+0xbc>
 8005eb4:	ee10 3a10 	vmov	r3, s0
 8005eb8:	eeb0 7a67 	vmov.f32	s14, s15
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfb8      	it	lt
 8005ec0:	eef0 7a66 	vmovlt.f32	s15, s13
 8005ec4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005ec8:	4770      	bx	lr
 8005eca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005f30 <scalbnf+0xc0>
 8005ece:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005ed2:	4770      	bx	lr
 8005ed4:	0dd2      	lsrs	r2, r2, #23
 8005ed6:	e7e5      	b.n	8005ea4 <scalbnf+0x34>
 8005ed8:	4410      	add	r0, r2
 8005eda:	28fe      	cmp	r0, #254	@ 0xfe
 8005edc:	dce6      	bgt.n	8005eac <scalbnf+0x3c>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	dd06      	ble.n	8005ef0 <scalbnf+0x80>
 8005ee2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005ee6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005eea:	ee00 3a10 	vmov	s0, r3
 8005eee:	4770      	bx	lr
 8005ef0:	f110 0f16 	cmn.w	r0, #22
 8005ef4:	da09      	bge.n	8005f0a <scalbnf+0x9a>
 8005ef6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005f30 <scalbnf+0xc0>
 8005efa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005f34 <scalbnf+0xc4>
 8005efe:	ee10 3a10 	vmov	r3, s0
 8005f02:	eeb0 7a67 	vmov.f32	s14, s15
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	e7d9      	b.n	8005ebe <scalbnf+0x4e>
 8005f0a:	3019      	adds	r0, #25
 8005f0c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005f10:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005f14:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005f38 <scalbnf+0xc8>
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	e7d7      	b.n	8005ece <scalbnf+0x5e>
 8005f1e:	bf00      	nop
 8005f20:	ffff3cb0 	.word	0xffff3cb0
 8005f24:	4c000000 	.word	0x4c000000
 8005f28:	7149f2ca 	.word	0x7149f2ca
 8005f2c:	f149f2ca 	.word	0xf149f2ca
 8005f30:	0da24260 	.word	0x0da24260
 8005f34:	8da24260 	.word	0x8da24260
 8005f38:	33000000 	.word	0x33000000

08005f3c <with_errnof>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	ed2d 8b02 	vpush	{d8}
 8005f42:	eeb0 8a40 	vmov.f32	s16, s0
 8005f46:	4604      	mov	r4, r0
 8005f48:	f7ff f8e2 	bl	8005110 <__errno>
 8005f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f50:	ecbd 8b02 	vpop	{d8}
 8005f54:	6004      	str	r4, [r0, #0]
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <xflowf>:
 8005f58:	b130      	cbz	r0, 8005f68 <xflowf+0x10>
 8005f5a:	eef1 7a40 	vneg.f32	s15, s0
 8005f5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005f62:	2022      	movs	r0, #34	@ 0x22
 8005f64:	f7ff bfea 	b.w	8005f3c <with_errnof>
 8005f68:	eef0 7a40 	vmov.f32	s15, s0
 8005f6c:	e7f7      	b.n	8005f5e <xflowf+0x6>
	...

08005f70 <__math_uflowf>:
 8005f70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005f78 <__math_uflowf+0x8>
 8005f74:	f7ff bff0 	b.w	8005f58 <xflowf>
 8005f78:	10000000 	.word	0x10000000

08005f7c <__math_oflowf>:
 8005f7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005f84 <__math_oflowf+0x8>
 8005f80:	f7ff bfea 	b.w	8005f58 <xflowf>
 8005f84:	70000000 	.word	0x70000000

08005f88 <__kernel_rem_pio2f>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	ed2d 8b04 	vpush	{d8-d9}
 8005f90:	b0d9      	sub	sp, #356	@ 0x164
 8005f92:	4690      	mov	r8, r2
 8005f94:	9001      	str	r0, [sp, #4]
 8005f96:	4ab6      	ldr	r2, [pc, #728]	@ (8006270 <__kernel_rem_pio2f+0x2e8>)
 8005f98:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005f9a:	f118 0f04 	cmn.w	r8, #4
 8005f9e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005fa2:	460f      	mov	r7, r1
 8005fa4:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fa8:	db26      	blt.n	8005ff8 <__kernel_rem_pio2f+0x70>
 8005faa:	f1b8 0203 	subs.w	r2, r8, #3
 8005fae:	bf48      	it	mi
 8005fb0:	f108 0204 	addmi.w	r2, r8, #4
 8005fb4:	10d2      	asrs	r2, r2, #3
 8005fb6:	1c55      	adds	r5, r2, #1
 8005fb8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005fba:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 8005fbe:	00e8      	lsls	r0, r5, #3
 8005fc0:	eba2 060b 	sub.w	r6, r2, fp
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005fca:	eb0a 0c0b 	add.w	ip, sl, fp
 8005fce:	ac1c      	add	r4, sp, #112	@ 0x70
 8005fd0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	4560      	cmp	r0, ip
 8005fd8:	dd10      	ble.n	8005ffc <__kernel_rem_pio2f+0x74>
 8005fda:	a91c      	add	r1, sp, #112	@ 0x70
 8005fdc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005fe0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	4556      	cmp	r6, sl
 8005fe8:	dc24      	bgt.n	8006034 <__kernel_rem_pio2f+0xac>
 8005fea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005fee:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 8005ff2:	4684      	mov	ip, r0
 8005ff4:	2400      	movs	r4, #0
 8005ff6:	e016      	b.n	8006026 <__kernel_rem_pio2f+0x9e>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	e7dc      	b.n	8005fb6 <__kernel_rem_pio2f+0x2e>
 8005ffc:	42c6      	cmn	r6, r0
 8005ffe:	bf5d      	ittte	pl
 8006000:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006004:	ee07 1a90 	vmovpl	s15, r1
 8006008:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800600c:	eef0 7a47 	vmovmi.f32	s15, s14
 8006010:	ece4 7a01 	vstmia	r4!, {s15}
 8006014:	3001      	adds	r0, #1
 8006016:	e7de      	b.n	8005fd6 <__kernel_rem_pio2f+0x4e>
 8006018:	ecfe 6a01 	vldmia	lr!, {s13}
 800601c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8006020:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006024:	3401      	adds	r4, #1
 8006026:	455c      	cmp	r4, fp
 8006028:	ddf6      	ble.n	8006018 <__kernel_rem_pio2f+0x90>
 800602a:	ece9 7a01 	vstmia	r9!, {s15}
 800602e:	3601      	adds	r6, #1
 8006030:	3004      	adds	r0, #4
 8006032:	e7d8      	b.n	8005fe6 <__kernel_rem_pio2f+0x5e>
 8006034:	a908      	add	r1, sp, #32
 8006036:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800603a:	9104      	str	r1, [sp, #16]
 800603c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800603e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800627c <__kernel_rem_pio2f+0x2f4>
 8006042:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8006278 <__kernel_rem_pio2f+0x2f0>
 8006046:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800604a:	9203      	str	r2, [sp, #12]
 800604c:	4654      	mov	r4, sl
 800604e:	00a2      	lsls	r2, r4, #2
 8006050:	9205      	str	r2, [sp, #20]
 8006052:	aa58      	add	r2, sp, #352	@ 0x160
 8006054:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006058:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800605c:	a944      	add	r1, sp, #272	@ 0x110
 800605e:	aa08      	add	r2, sp, #32
 8006060:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006064:	4694      	mov	ip, r2
 8006066:	4626      	mov	r6, r4
 8006068:	2e00      	cmp	r6, #0
 800606a:	dc4c      	bgt.n	8006106 <__kernel_rem_pio2f+0x17e>
 800606c:	4628      	mov	r0, r5
 800606e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006072:	f7ff fefd 	bl	8005e70 <scalbnf>
 8006076:	eeb0 8a40 	vmov.f32	s16, s0
 800607a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800607e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006082:	f000 f9e9 	bl	8006458 <floorf>
 8006086:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800608a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800608e:	2d00      	cmp	r5, #0
 8006090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006094:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006098:	ee17 9a90 	vmov	r9, s15
 800609c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80060a4:	dd41      	ble.n	800612a <__kernel_rem_pio2f+0x1a2>
 80060a6:	f104 3cff 	add.w	ip, r4, #4294967295
 80060aa:	a908      	add	r1, sp, #32
 80060ac:	f1c5 0e08 	rsb	lr, r5, #8
 80060b0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80060b4:	fa46 f00e 	asr.w	r0, r6, lr
 80060b8:	4481      	add	r9, r0
 80060ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80060be:	1a36      	subs	r6, r6, r0
 80060c0:	f1c5 0007 	rsb	r0, r5, #7
 80060c4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80060c8:	4106      	asrs	r6, r0
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	dd3c      	ble.n	8006148 <__kernel_rem_pio2f+0x1c0>
 80060ce:	f04f 0e00 	mov.w	lr, #0
 80060d2:	f109 0901 	add.w	r9, r9, #1
 80060d6:	4670      	mov	r0, lr
 80060d8:	4574      	cmp	r4, lr
 80060da:	dc68      	bgt.n	80061ae <__kernel_rem_pio2f+0x226>
 80060dc:	2d00      	cmp	r5, #0
 80060de:	dd03      	ble.n	80060e8 <__kernel_rem_pio2f+0x160>
 80060e0:	2d01      	cmp	r5, #1
 80060e2:	d074      	beq.n	80061ce <__kernel_rem_pio2f+0x246>
 80060e4:	2d02      	cmp	r5, #2
 80060e6:	d07d      	beq.n	80061e4 <__kernel_rem_pio2f+0x25c>
 80060e8:	2e02      	cmp	r6, #2
 80060ea:	d12d      	bne.n	8006148 <__kernel_rem_pio2f+0x1c0>
 80060ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80060f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80060f4:	b340      	cbz	r0, 8006148 <__kernel_rem_pio2f+0x1c0>
 80060f6:	4628      	mov	r0, r5
 80060f8:	9306      	str	r3, [sp, #24]
 80060fa:	f7ff feb9 	bl	8005e70 <scalbnf>
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006104:	e020      	b.n	8006148 <__kernel_rem_pio2f+0x1c0>
 8006106:	ee60 7a28 	vmul.f32	s15, s0, s17
 800610a:	3e01      	subs	r6, #1
 800610c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006114:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006118:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800611c:	ecac 0a01 	vstmia	ip!, {s0}
 8006120:	ed30 0a01 	vldmdb	r0!, {s0}
 8006124:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006128:	e79e      	b.n	8006068 <__kernel_rem_pio2f+0xe0>
 800612a:	d105      	bne.n	8006138 <__kernel_rem_pio2f+0x1b0>
 800612c:	1e60      	subs	r0, r4, #1
 800612e:	a908      	add	r1, sp, #32
 8006130:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006134:	11f6      	asrs	r6, r6, #7
 8006136:	e7c8      	b.n	80060ca <__kernel_rem_pio2f+0x142>
 8006138:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800613c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	da31      	bge.n	80061aa <__kernel_rem_pio2f+0x222>
 8006146:	2600      	movs	r6, #0
 8006148:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	f040 8098 	bne.w	8006284 <__kernel_rem_pio2f+0x2fc>
 8006154:	1e60      	subs	r0, r4, #1
 8006156:	2200      	movs	r2, #0
 8006158:	4550      	cmp	r0, sl
 800615a:	da4b      	bge.n	80061f4 <__kernel_rem_pio2f+0x26c>
 800615c:	2a00      	cmp	r2, #0
 800615e:	d065      	beq.n	800622c <__kernel_rem_pio2f+0x2a4>
 8006160:	3c01      	subs	r4, #1
 8006162:	ab08      	add	r3, sp, #32
 8006164:	3d08      	subs	r5, #8
 8006166:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f8      	beq.n	8006160 <__kernel_rem_pio2f+0x1d8>
 800616e:	4628      	mov	r0, r5
 8006170:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006174:	f7ff fe7c 	bl	8005e70 <scalbnf>
 8006178:	1c63      	adds	r3, r4, #1
 800617a:	aa44      	add	r2, sp, #272	@ 0x110
 800617c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800627c <__kernel_rem_pio2f+0x2f4>
 8006180:	0099      	lsls	r1, r3, #2
 8006182:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006186:	4623      	mov	r3, r4
 8006188:	2b00      	cmp	r3, #0
 800618a:	f280 80a9 	bge.w	80062e0 <__kernel_rem_pio2f+0x358>
 800618e:	4623      	mov	r3, r4
 8006190:	2b00      	cmp	r3, #0
 8006192:	f2c0 80c7 	blt.w	8006324 <__kernel_rem_pio2f+0x39c>
 8006196:	aa44      	add	r2, sp, #272	@ 0x110
 8006198:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800619c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006274 <__kernel_rem_pio2f+0x2ec>
 80061a0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 80061a4:	2000      	movs	r0, #0
 80061a6:	1ae2      	subs	r2, r4, r3
 80061a8:	e0b1      	b.n	800630e <__kernel_rem_pio2f+0x386>
 80061aa:	2602      	movs	r6, #2
 80061ac:	e78f      	b.n	80060ce <__kernel_rem_pio2f+0x146>
 80061ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80061b2:	b948      	cbnz	r0, 80061c8 <__kernel_rem_pio2f+0x240>
 80061b4:	b121      	cbz	r1, 80061c0 <__kernel_rem_pio2f+0x238>
 80061b6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80061ba:	f842 1c04 	str.w	r1, [r2, #-4]
 80061be:	2101      	movs	r1, #1
 80061c0:	f10e 0e01 	add.w	lr, lr, #1
 80061c4:	4608      	mov	r0, r1
 80061c6:	e787      	b.n	80060d8 <__kernel_rem_pio2f+0x150>
 80061c8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80061cc:	e7f5      	b.n	80061ba <__kernel_rem_pio2f+0x232>
 80061ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80061d2:	aa08      	add	r2, sp, #32
 80061d4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80061d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061dc:	a908      	add	r1, sp, #32
 80061de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80061e2:	e781      	b.n	80060e8 <__kernel_rem_pio2f+0x160>
 80061e4:	f104 3cff 	add.w	ip, r4, #4294967295
 80061e8:	aa08      	add	r2, sp, #32
 80061ea:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80061ee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80061f2:	e7f3      	b.n	80061dc <__kernel_rem_pio2f+0x254>
 80061f4:	a908      	add	r1, sp, #32
 80061f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80061fa:	3801      	subs	r0, #1
 80061fc:	430a      	orrs	r2, r1
 80061fe:	e7ab      	b.n	8006158 <__kernel_rem_pio2f+0x1d0>
 8006200:	3201      	adds	r2, #1
 8006202:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006206:	2e00      	cmp	r6, #0
 8006208:	d0fa      	beq.n	8006200 <__kernel_rem_pio2f+0x278>
 800620a:	9905      	ldr	r1, [sp, #20]
 800620c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006210:	eb0d 0001 	add.w	r0, sp, r1
 8006214:	18e6      	adds	r6, r4, r3
 8006216:	a91c      	add	r1, sp, #112	@ 0x70
 8006218:	f104 0c01 	add.w	ip, r4, #1
 800621c:	384c      	subs	r0, #76	@ 0x4c
 800621e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006222:	4422      	add	r2, r4
 8006224:	4562      	cmp	r2, ip
 8006226:	da04      	bge.n	8006232 <__kernel_rem_pio2f+0x2aa>
 8006228:	4614      	mov	r4, r2
 800622a:	e710      	b.n	800604e <__kernel_rem_pio2f+0xc6>
 800622c:	9804      	ldr	r0, [sp, #16]
 800622e:	2201      	movs	r2, #1
 8006230:	e7e7      	b.n	8006202 <__kernel_rem_pio2f+0x27a>
 8006232:	9903      	ldr	r1, [sp, #12]
 8006234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006238:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	ee07 1a90 	vmov	s15, r1
 8006242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006246:	2400      	movs	r4, #0
 8006248:	ece6 7a01 	vstmia	r6!, {s15}
 800624c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 8006250:	46b1      	mov	r9, r6
 8006252:	455c      	cmp	r4, fp
 8006254:	dd04      	ble.n	8006260 <__kernel_rem_pio2f+0x2d8>
 8006256:	ece0 7a01 	vstmia	r0!, {s15}
 800625a:	f10c 0c01 	add.w	ip, ip, #1
 800625e:	e7e1      	b.n	8006224 <__kernel_rem_pio2f+0x29c>
 8006260:	ecfe 6a01 	vldmia	lr!, {s13}
 8006264:	ed39 7a01 	vldmdb	r9!, {s14}
 8006268:	3401      	adds	r4, #1
 800626a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800626e:	e7f0      	b.n	8006252 <__kernel_rem_pio2f+0x2ca>
 8006270:	080068e8 	.word	0x080068e8
 8006274:	080068bc 	.word	0x080068bc
 8006278:	43800000 	.word	0x43800000
 800627c:	3b800000 	.word	0x3b800000
 8006280:	00000000 	.word	0x00000000
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	eeb0 0a48 	vmov.f32	s0, s16
 800628a:	eba3 0008 	sub.w	r0, r3, r8
 800628e:	f7ff fdef 	bl	8005e70 <scalbnf>
 8006292:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006278 <__kernel_rem_pio2f+0x2f0>
 8006296:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	db19      	blt.n	80062d4 <__kernel_rem_pio2f+0x34c>
 80062a0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800627c <__kernel_rem_pio2f+0x2f4>
 80062a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80062a8:	aa08      	add	r2, sp, #32
 80062aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ae:	3508      	adds	r5, #8
 80062b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80062b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80062c0:	ee10 3a10 	vmov	r3, s0
 80062c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80062c8:	ee17 3a90 	vmov	r3, s15
 80062cc:	3401      	adds	r4, #1
 80062ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80062d2:	e74c      	b.n	800616e <__kernel_rem_pio2f+0x1e6>
 80062d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80062d8:	aa08      	add	r2, sp, #32
 80062da:	ee10 3a10 	vmov	r3, s0
 80062de:	e7f6      	b.n	80062ce <__kernel_rem_pio2f+0x346>
 80062e0:	a808      	add	r0, sp, #32
 80062e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80062e6:	9001      	str	r0, [sp, #4]
 80062e8:	ee07 0a90 	vmov	s15, r0
 80062ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062f0:	3b01      	subs	r3, #1
 80062f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80062f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80062fa:	ed62 7a01 	vstmdb	r2!, {s15}
 80062fe:	e743      	b.n	8006188 <__kernel_rem_pio2f+0x200>
 8006300:	ecfc 6a01 	vldmia	ip!, {s13}
 8006304:	ecb5 7a01 	vldmia	r5!, {s14}
 8006308:	eee6 7a87 	vfma.f32	s15, s13, s14
 800630c:	3001      	adds	r0, #1
 800630e:	4550      	cmp	r0, sl
 8006310:	dc01      	bgt.n	8006316 <__kernel_rem_pio2f+0x38e>
 8006312:	4290      	cmp	r0, r2
 8006314:	ddf4      	ble.n	8006300 <__kernel_rem_pio2f+0x378>
 8006316:	a858      	add	r0, sp, #352	@ 0x160
 8006318:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800631c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006320:	3b01      	subs	r3, #1
 8006322:	e735      	b.n	8006190 <__kernel_rem_pio2f+0x208>
 8006324:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006326:	2b02      	cmp	r3, #2
 8006328:	dc09      	bgt.n	800633e <__kernel_rem_pio2f+0x3b6>
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc27      	bgt.n	800637e <__kernel_rem_pio2f+0x3f6>
 800632e:	d040      	beq.n	80063b2 <__kernel_rem_pio2f+0x42a>
 8006330:	f009 0007 	and.w	r0, r9, #7
 8006334:	b059      	add	sp, #356	@ 0x164
 8006336:	ecbd 8b04 	vpop	{d8-d9}
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006340:	2b03      	cmp	r3, #3
 8006342:	d1f5      	bne.n	8006330 <__kernel_rem_pio2f+0x3a8>
 8006344:	aa30      	add	r2, sp, #192	@ 0xc0
 8006346:	1f0b      	subs	r3, r1, #4
 8006348:	4413      	add	r3, r2
 800634a:	461a      	mov	r2, r3
 800634c:	4620      	mov	r0, r4
 800634e:	2800      	cmp	r0, #0
 8006350:	dc50      	bgt.n	80063f4 <__kernel_rem_pio2f+0x46c>
 8006352:	4622      	mov	r2, r4
 8006354:	2a01      	cmp	r2, #1
 8006356:	dc5d      	bgt.n	8006414 <__kernel_rem_pio2f+0x48c>
 8006358:	ab30      	add	r3, sp, #192	@ 0xc0
 800635a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 800635e:	440b      	add	r3, r1
 8006360:	2c01      	cmp	r4, #1
 8006362:	dc67      	bgt.n	8006434 <__kernel_rem_pio2f+0x4ac>
 8006364:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006368:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800636c:	2e00      	cmp	r6, #0
 800636e:	d167      	bne.n	8006440 <__kernel_rem_pio2f+0x4b8>
 8006370:	edc7 6a00 	vstr	s13, [r7]
 8006374:	ed87 7a01 	vstr	s14, [r7, #4]
 8006378:	edc7 7a02 	vstr	s15, [r7, #8]
 800637c:	e7d8      	b.n	8006330 <__kernel_rem_pio2f+0x3a8>
 800637e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006380:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 8006384:	440b      	add	r3, r1
 8006386:	4622      	mov	r2, r4
 8006388:	2a00      	cmp	r2, #0
 800638a:	da24      	bge.n	80063d6 <__kernel_rem_pio2f+0x44e>
 800638c:	b34e      	cbz	r6, 80063e2 <__kernel_rem_pio2f+0x45a>
 800638e:	eef1 7a47 	vneg.f32	s15, s14
 8006392:	edc7 7a00 	vstr	s15, [r7]
 8006396:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800639a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800639e:	aa31      	add	r2, sp, #196	@ 0xc4
 80063a0:	2301      	movs	r3, #1
 80063a2:	429c      	cmp	r4, r3
 80063a4:	da20      	bge.n	80063e8 <__kernel_rem_pio2f+0x460>
 80063a6:	b10e      	cbz	r6, 80063ac <__kernel_rem_pio2f+0x424>
 80063a8:	eef1 7a67 	vneg.f32	s15, s15
 80063ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80063b0:	e7be      	b.n	8006330 <__kernel_rem_pio2f+0x3a8>
 80063b2:	ab30      	add	r3, sp, #192	@ 0xc0
 80063b4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8006280 <__kernel_rem_pio2f+0x2f8>
 80063b8:	440b      	add	r3, r1
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	da05      	bge.n	80063ca <__kernel_rem_pio2f+0x442>
 80063be:	b10e      	cbz	r6, 80063c4 <__kernel_rem_pio2f+0x43c>
 80063c0:	eef1 7a67 	vneg.f32	s15, s15
 80063c4:	edc7 7a00 	vstr	s15, [r7]
 80063c8:	e7b2      	b.n	8006330 <__kernel_rem_pio2f+0x3a8>
 80063ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80063ce:	3c01      	subs	r4, #1
 80063d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d4:	e7f1      	b.n	80063ba <__kernel_rem_pio2f+0x432>
 80063d6:	ed73 7a01 	vldmdb	r3!, {s15}
 80063da:	3a01      	subs	r2, #1
 80063dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063e0:	e7d2      	b.n	8006388 <__kernel_rem_pio2f+0x400>
 80063e2:	eef0 7a47 	vmov.f32	s15, s14
 80063e6:	e7d4      	b.n	8006392 <__kernel_rem_pio2f+0x40a>
 80063e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80063ec:	3301      	adds	r3, #1
 80063ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063f2:	e7d6      	b.n	80063a2 <__kernel_rem_pio2f+0x41a>
 80063f4:	ed72 7a01 	vldmdb	r2!, {s15}
 80063f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80063fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006400:	3801      	subs	r0, #1
 8006402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006406:	ed82 7a00 	vstr	s14, [r2]
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006412:	e79c      	b.n	800634e <__kernel_rem_pio2f+0x3c6>
 8006414:	ed73 7a01 	vldmdb	r3!, {s15}
 8006418:	edd3 6a01 	vldr	s13, [r3, #4]
 800641c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006420:	3a01      	subs	r2, #1
 8006422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006426:	ed83 7a00 	vstr	s14, [r3]
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006432:	e78f      	b.n	8006354 <__kernel_rem_pio2f+0x3cc>
 8006434:	ed33 7a01 	vldmdb	r3!, {s14}
 8006438:	3c01      	subs	r4, #1
 800643a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800643e:	e78f      	b.n	8006360 <__kernel_rem_pio2f+0x3d8>
 8006440:	eef1 6a66 	vneg.f32	s13, s13
 8006444:	eeb1 7a47 	vneg.f32	s14, s14
 8006448:	edc7 6a00 	vstr	s13, [r7]
 800644c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006450:	eef1 7a67 	vneg.f32	s15, s15
 8006454:	e790      	b.n	8006378 <__kernel_rem_pio2f+0x3f0>
 8006456:	bf00      	nop

08006458 <floorf>:
 8006458:	ee10 3a10 	vmov	r3, s0
 800645c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006460:	3a7f      	subs	r2, #127	@ 0x7f
 8006462:	2a16      	cmp	r2, #22
 8006464:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006468:	dc2b      	bgt.n	80064c2 <floorf+0x6a>
 800646a:	2a00      	cmp	r2, #0
 800646c:	da12      	bge.n	8006494 <floorf+0x3c>
 800646e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80064d4 <floorf+0x7c>
 8006472:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006476:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800647a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647e:	dd06      	ble.n	800648e <floorf+0x36>
 8006480:	2b00      	cmp	r3, #0
 8006482:	da24      	bge.n	80064ce <floorf+0x76>
 8006484:	2900      	cmp	r1, #0
 8006486:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <floorf+0x80>)
 8006488:	bf08      	it	eq
 800648a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800648e:	ee00 3a10 	vmov	s0, r3
 8006492:	4770      	bx	lr
 8006494:	4911      	ldr	r1, [pc, #68]	@ (80064dc <floorf+0x84>)
 8006496:	4111      	asrs	r1, r2
 8006498:	420b      	tst	r3, r1
 800649a:	d0fa      	beq.n	8006492 <floorf+0x3a>
 800649c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80064d4 <floorf+0x7c>
 80064a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80064a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80064a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ac:	ddef      	ble.n	800648e <floorf+0x36>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfbe      	ittt	lt
 80064b2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80064b6:	fa40 f202 	asrlt.w	r2, r0, r2
 80064ba:	189b      	addlt	r3, r3, r2
 80064bc:	ea23 0301 	bic.w	r3, r3, r1
 80064c0:	e7e5      	b.n	800648e <floorf+0x36>
 80064c2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80064c6:	d3e4      	bcc.n	8006492 <floorf+0x3a>
 80064c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80064cc:	4770      	bx	lr
 80064ce:	2300      	movs	r3, #0
 80064d0:	e7dd      	b.n	800648e <floorf+0x36>
 80064d2:	bf00      	nop
 80064d4:	7149f2ca 	.word	0x7149f2ca
 80064d8:	bf800000 	.word	0xbf800000
 80064dc:	007fffff 	.word	0x007fffff

080064e0 <_init>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr

080064ec <_fini>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr
